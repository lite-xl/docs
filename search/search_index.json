{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Main","text":"<p>Work in progress. Expect rough edges, document mess and many more.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Lite XL is a lightweight but powerful text editor, available on Windows, Linux and macOS.</p> <p>It comes with built-in support for several languages including Lua, JavaScript and C/C++ and is extensible via plugins.</p>"},{"location":"getting-started/#recommended-plugins","title":"Recommended plugins","text":"<p>Lite XL packages are minimal by default. These plugins provide lots of features for a pleasant editing experience.</p>    Plugin Features     [align_carets] Align text on multiple carets and selections   [autoinsert] Automatically insert closing brackets and quotes   [autosave] Automatically saves the file when it is modified   [bracketmatch] Highlight matching brackets   [editorconfig] EditorConfig for Lite XL   [ephemeral_tabs] Ephemeral tabs (previewing files without creating multiple tabs)   [fontconfig] Adds support for system fonts via fontconfig   [gitdiff_highlight] Git diff gutter   [indentguide] Indent guides   [lint+] Linter support   [litepresence] Discord rich presence   [lsp] Language Server support for Lite XL   [lspkind] Completion menu kind/type icons for Lite XL LSP   [minimap] Minimap   [selectionhighlight] Highlight code that matches the selection   [settings] Settings GUI for Lite XL (requires the [widget] plugin)   [widgets] Widget toolkit for Lite XL. Needed for [lsp] and [settings]."},{"location":"about/contributors/","title":"Contributors","text":"<p>This is a non-exhaustive list of people that contributed to Lite XL. You can get the contributors for a particular release on the release page.</p>    Name Contributions     rxi Development of the original lite editor.   Francesco Creator of lite-xl fork from rxi/lite.   Adam Maintainer, renderer enhancements, multi-language syntax highlighting and many other improvements.   Guldoman Maintainer, IME support, various bug fixes and performance improvements.   Jefferson Gonz\u00e1lez LSP and widget toolkit, syntax highlighting improvements and many other contributions.   Takase NagView, Process API improvements and various bug fixes for Windows.   redtide Continuous integration, build scripts and the website.   Jan Build system maintenance, dirmonitor improvements and bug fixes.   Jipok Text editing improvements and bug fixes.   liquidev Tab style and animations improvements.   Cukmekerb Syntax highlighting improvements.   Nils Kvist Popup window replacement with CommandView dialog.   George Linkovsky macOS bug fixes.   TorchedSammy Various plugins and UI improvements.   Janis-Leuenberger Add keymap bindings help file and macOS testing.   Mat Mariani Help for macOS port. Some resources taken from mathewmariani/lite-macos.   daubaris Initial implementation of Xft.dpi query using xrdb command.   Robert \u0160tojs Continuous integration configuration.   Aqil Contractor Text rendering enhancement, bug hunter and tester."},{"location":"about/faq/","title":"FAQ","text":""},{"location":"about/faq/#is-there-an-easier-way-to-configure-lite-xl-without-learning-lua","title":"Is there an easier way to configure Lite XL without learning Lua?","text":"<p>Yes, since v2.1.0 we provide an extended package with additional plugins which provides a GUI for configuring Lite XL. The packages are prefixed with <code>lite-xl-(version)-addons</code> (e.g. <code>lite-xl-v2.1.0-addons-windows-x86_64.zip</code>).</p>"},{"location":"about/faq/#can-i-get-smart-autocompletion-intellisenselsp","title":"Can I get smart autocompletion (intellisense/LSP)?","text":"<p>Check out the lsp plugin.</p>"},{"location":"about/faq/#where-is-the-integrated-terminal","title":"Where is the integrated terminal?","text":"<p>Work is being done on lite-xl-terminal and lite-xl-tmt. Both plugins have their own supported features and bugs, so you should try both out and see which one works for you.</p>"},{"location":"about/faq/#tabs-and-indent-size","title":"Tabs and indent size?","text":"<p>In your user config (the cog icon in the file tree):</p> <pre><code>config.tab_type = \"soft\" -- soft for spaces, hard for real tabs (\\t)\nconfig.indent_size = 4   -- 4 spaces\n</code></pre>"},{"location":"about/faq/#how-to-enable-line-wrapping","title":"How to enable line wrapping?","text":"<p>Since v2.1.0, you can enable line wrapping by pressing F10. Before v2.1.0, only hard wrapping is supported via autowrap.</p>"},{"location":"about/faq/#how-to-bind-commands-to-keys","title":"How to bind commands to keys?","text":"<pre><code>local keymap = require \"core.keymap\"\nkeymap.add { [\"ctrl+escape\"] = \"core:quit\" }\n</code></pre>"},{"location":"about/faq/#how-to-unbind-commands-for-certain-keys","title":"How to unbind commands for certain keys?","text":"<pre><code>-- the second parameter lets you override commands for certain keys\n-- in this case it maps it to nothing\nkeymap.add({ [\"ctrl+escape\"] = {} }, true)\n</code></pre>"},{"location":"about/faq/#how-to-get-commands-for-those-keybinds","title":"How to get commands for those keybinds?","text":"<p>You can search for commands in the command palette.</p> <p>For each command, replace the spaces on the right side with dashes.</p> <p>For example: <code>Core: Find Command</code> \u2192 <code>core:find-command</code></p>"},{"location":"about/faq/#what-version-of-lua-does-lite-xl-use","title":"What version of Lua does Lite XL use?","text":"<p>Lua 5.4 since v2.1.0 and Lua 5.4.2 before v2.1.0. There's some activity around using LuaJIT instead (which is 5.1) but it can provide some Lua 5.2 compatibility. Ongoing work is being done to maintain compatibility between LuaJIT and Lua 5.4, but this is not officially supported.</p>"},{"location":"about/faq/#vim-mode","title":"Vim mode?","text":"<p>You need to vibe.</p>"},{"location":"about/faq/#plugin-recommendations","title":"Plugin recommendations","text":"<p>Just in case you don't want to comb through our plugin repository, these are a list of plugins that just makes Lite XL a lot more pleasant. Most of these plugins work on v2.1.0 or the master branch.</p>    Plugin Use case     align_carets Align text on multiple carets and selections   autoinsert Automatically insert closing brackets and quotes   autosave Automatically saves the file when it is modified   bracketmatch Highlight matching brackets   editorconfig EditorConfig for Lite XL   ephemeral_tabs Ephemeral tabs (previewing files without creating multiple tabs)   fontconfig Adds support for system fonts via fontconfig   gitdiff_highlight Git diff gutter   indentguide Indent guides   lint+ Linter support   litepresence Discord rich presence   lsp Language Server support for Lite XL   lspkind Completion menu kind/type icons for Lite XL LSP   minimap Minimap   selectionhighlight Highlight code that matches the selection   settings Settings GUI for Lite XL (requires the [widget] plugin)   widgets Widget toolkit for Lite XL. Needed for lsp and settings."},{"location":"about/faq/#wheres-feature-x-how-about-y","title":"Where's feature X? How about Y?","text":"<p>You can get more info in Features.</p>"},{"location":"about/features/","title":"Features","text":""},{"location":"about/features/#cross-platform","title":"Cross-Platform","text":"<p>We currently support Windows, Linux and macOS (with Retina display support). However, Lite XL can be compiled and run on many platforms. We have received reports of successful ports to Android, PS Vita, Haiku, AmigaOS 4, MorphOS 3 and browsers via WASM.</p>"},{"location":"about/features/#lightweight","title":"Lightweight","text":"<p>We are currently around 3 MB in size and takes about 10 MB in RAM. No Electron / WebView involved. The whole thing is just Lua running on a software renderer.</p>"},{"location":"about/features/#extensible","title":"Extensible","text":"<p>While the editor is minimal by default, it is very extensible via Lua scripting. In fact, a lot of features are provided by plugins. For example, VSC-like intellisense, Minimap and Git gutter.</p>"},{"location":"about/features/#better-font-rendering","title":"Better font rendering","text":"<p>The editor looks good in screen of any sizes. Some other options are also configurable, such as hinting and anti-aliasing.</p>"},{"location":"about/features/#multi-cursor-editing","title":"Multi-cursor editing","text":"<p>You can now place multiple cursors by <code>ctrl</code> + <code>lclick</code> on lines or <code>ctrl</code> + <code>shift</code> + <code>up</code> or <code>ctrl</code> + <code>shift</code> + <code>down</code>.</p>  <p>We also have a list of features that we aren't planning to add to the editor. Some of these features are already achieved by plugins, but we are not shipping them by default.</p>"},{"location":"about/screenshots/","title":"Screenshots","text":""},{"location":"about/wontdo/","title":"Won't Dos","text":""},{"location":"about/wontdo/#hardware-accelerated-rendering","title":"Hardware accelerated rendering","text":"<p>tl;dr - franko stated that he isn't considering using OpenGL due to the skills and work involved.</p>  <p>Hardware acceleration was brought up in this discussion. Takase had made 2 attempts at this - at first using NanoVG and then forcing SDL to use GPU rendering. The NanoVG port does not offer features considered important to Lite XL - sub-pixel font rendering while forcing SDL to use GPU rendering does not work as the UI is rendered on CPU and then copied to the GPU. Right now, we decided to focus on optimizing the software renderer and various part of Lua code.</p> <p>For those who want to give this a shot, the GPU renderer should at least support sub-pixel rendering and blending. This might be possible with SDL2 Renderer API, but it has not been investigated thoroughly. Other considerations may include driver blacklisting as well since GPU rendering is significantly slower on certain platforms with certain drivers.</p>"},{"location":"about/wontdo/#system-fonts","title":"System fonts","text":"<p>This is painful because various systems has their own mechanism of managing fonts. For now, users can use the fontconfig plugin. Fontconfig is widely available on Linux and installable on macOS, while Windows builds are available. In the future, we might consider adding API to read font metadata, allowing us to write a fontconfig alternative in Lua. (no promises here)</p>"},{"location":"about/wontdo/#opening-unc-paths-on-windows-network-drives-accessing-wsl2-files-from-windows","title":"Opening UNC paths on Windows (network drives, accessing WSL2 files from Windows)","text":"<p>Our path handling code can only handle POSIX and Windows paths. We also aren't sure how Lite XL will behave in these scenarios.</p>"},{"location":"about/wontdo/#inter-window-communication-dragging-tabs-between-windows-and-other-magic","title":"Inter-window communication (dragging tabs between windows and other magic)","text":"<p>This is by far the hardest to achieve. Lite XL has no intention to link to any widget toolkits (Qt and GTK) which are required for these features. An alternative approach is to create our own IPC mechanism,  but that's reinventing the wheel.</p> <p>There is a working ipc plugin that uses the file system, but it is modular and support for D-Bus or alternatives can be added.</p>"},{"location":"about/wontdo/#integrated-terminal","title":"Integrated terminal","text":"<p>A terminal is complex to implement. It is a state machine with many states and unofficial extensions that are difficult to support properly. Currently, lite-xl-tmt and lite-xl-terminal provides an integrated terminal in Lite XL, but we will not provide an implementation built into the editor.</p>"},{"location":"documentation/build/","title":"Build","text":"<p>Once you have downloaded the source code, you can build Lite XL using Meson. In addition, the <code>build-packages.sh</code> script can be used to compile Lite XL and create an OS-specific package for Linux, Windows or macOS.</p> <p>The following libraries are required:</p> <ul> <li>Lua 5.4</li> <li>SDL2</li> <li>freetype2</li> <li>pcre2</li> </ul> <p>If they are not found, they will be downloaded and compiled by Meson. Otherwise, if they are present, they will be used to compile Lite XL.</p>"},{"location":"documentation/build/#build-script","title":"Build Script","text":"<p>If you compile Lite XL yourself, it is recommended to use <code>build-packages.sh</code>:</p> <pre><code>bash build-packages.sh -h\n</code></pre> <p>The script will run Meson and create an archive with the application. Lite XL can be easily installed by unpacking the archive in any directory of your choice.</p> <p>On Windows two packages will be created, one called \"portable\" using the \"data\" folder next to the executable and the other one using a Unix-like file layout. The portable version conforms to the directory structure of normal Windows programs while the Unix-like file layout is meant for a Unix-like environment.</p> <p>Lite XL does not hard-code any directories and instead relies on environment variables. This allows the package to be run in any directory.</p>"},{"location":"documentation/build/#portable","title":"Portable","text":"<p>When running <code>meson setup</code> you may specify <code>-Dportable=true</code> to install Lite XL as a portable application.</p> <p>Lite XL needs the <code>data</code> directory to run properly. When <code>portable</code> is enabled, Lite XL will use the <code>data</code> directory placed next to the executable. Otherwise, Lite XL will use Unix-like directory locations. It will use <code>$prefix/share/lite-xl</code> for <code>data</code> and the executable will be located in <code>$prefix/bin</code>. <code>$prefix</code> is determined when the application starts such that <code>$prefix/bin</code> corresponds to the location of the executable.</p> <p>The <code>user</code> directory does not depend on the <code>portable</code> option and will always be <code>$HOME/.config/lite-xl</code>. On Windows, <code>$USERPROFILE</code> will be used instead of <code>$HOME</code>.</p>"},{"location":"documentation/build/#linux","title":"Linux","text":"<p>On Debian-based systems the required libraries and Meson can be installed using the following commands:</p> <pre><code># To install the required libraries:\nsudo apt install libfreetype6-dev libsdl2-dev libpcre2-dev liblua5.4-dev\n\n# To install Meson:\nsudo apt install meson\n# or pip3 install --user meson\n</code></pre> <p>To build Lite XL with Meson the commands below can be used:</p> <pre><code>meson setup --buildtype=release --prefix &lt;prefix&gt; build\nmeson compile -C build\nDESTDIR=\"$(pwd)/lite-xl\" meson install --skip-subprojects -C build\n</code></pre> <p>where <code>&lt;prefix&gt;</code> depends on the OS you are using: - on Linux is <code>/usr</code> - on macOS application bundle can be <code>\"/Lite XL.app\"</code></p> <p>If you are using a version of Meson below 0.54 you need to use different commands to compile and install:</p> <pre><code>meson setup --buildtype=release build\nninja -C build\nninja -C build install\n</code></pre>"},{"location":"documentation/build/#macos","title":"macOS","text":"<p>macOS is fully supported and a notarized app disk image is provided in the release page.  In addition, the application can be compiled using the generic instructions given above.</p>"},{"location":"documentation/build/#windows-msys2","title":"Windows MSYS2","text":"<p>The build environment chosen for Lite XL on Windows is MSYS2. Follow the installation instructions in the link.</p> <ul> <li>Open <code>MinGW 64-bit</code> or <code>MinGW 32-bit</code> shell from the start menu.</li> <li>Update the MSYS2 installation with <code>pacman -Syu</code></li> <li>Restart the shell</li> <li>Install the dependencies:</li> </ul> <pre><code>pacman -S \\\n  ${MINGW_PACKAGE_PREFIX}-freetype \\\n  ${MINGW_PACKAGE_PREFIX}-gcc \\\n  ${MINGW_PACKAGE_PREFIX}-ninja \\\n  ${MINGW_PACKAGE_PREFIX}-pcre2 \\\n  ${MINGW_PACKAGE_PREFIX}-pkg-config \\\n  ${MINGW_PACKAGE_PREFIX}-python-pip \\\n  ${MINGW_PACKAGE_PREFIX}-SDL2\npip3 install meson\n</code></pre> <p><code>${MINGW_PACKAGE_PREFIX}</code> expands either to <code>mingw-w64-i686</code> or <code>mingw-w64-x86_64</code> depending on the current MSYS2 shell used.</p>"},{"location":"documentation/keymap-macos/","title":"MacOS Keymap","text":"<p>Keymaps on different operating systems may be bound differently to conform to normal expectations for that operating system. Currently, there are only two operating system layouts - macOS and everything else.</p>"},{"location":"documentation/keymap-macos/#keymap","title":"Keymap","text":"Key Combination Actions     <code>cmd</code>+<code>/</code> <code>doc:toggle-line-comments</code>   <code>cmd</code>+<code>1</code> <code>root:switch-to-tab-1</code>   <code>cmd</code>+<code>2</code> <code>root:switch-to-tab-2</code>   <code>cmd</code>+<code>3</code> <code>root:switch-to-tab-3</code>   <code>cmd</code>+<code>4</code> <code>root:switch-to-tab-4</code>   <code>cmd</code>+<code>5</code> <code>root:switch-to-tab-5</code>   <code>cmd</code>+<code>6</code> <code>root:switch-to-tab-6</code>   <code>cmd</code>+<code>7</code> <code>root:switch-to-tab-7</code>   <code>cmd</code>+<code>8</code> <code>root:switch-to-tab-8</code>   <code>cmd</code>+<code>9</code> <code>root:switch-to-tab-9</code>   <code>cmd</code>+<code>[</code> <code>doc:move-to-previous-block-start</code>   <code>cmd</code>+<code>]</code> <code>doc:move-to-next-block-end</code>   <code>cmd</code>+<code>a</code> <code>doc:select-all</code>   <code>cmd</code>+<code>backspace</code> <code>doc:delete-to-start-of-indentation</code>   <code>cmd</code>+<code>c</code> <code>doc:copy</code>   <code>cmd</code>+<code>ctrl</code>+<code>i</code> <code>root:switch-to-up</code>   <code>cmd</code>+<code>ctrl</code>+<code>j</code> <code>root:switch-to-left</code>   <code>cmd</code>+<code>ctrl</code>+<code>k</code> <code>root:switch-to-down</code>   <code>cmd</code>+<code>ctrl</code>+<code>l</code> <code>root:switch-to-right</code>   <code>cmd</code>+<code>ctrl</code>+<code>return</code> <code>core:toggle-fullscreen</code>   <code>cmd</code>+<code>ctrl</code>+<code>shift</code>+<code>i</code> <code>root:split-up</code>   <code>cmd</code>+<code>ctrl</code>+<code>shift</code>+<code>j</code> <code>root:split-left</code>   <code>cmd</code>+<code>ctrl</code>+<code>shift</code>+<code>k</code> <code>root:split-down</code>   <code>cmd</code>+<code>ctrl</code>+<code>shift</code>+<code>l</code> <code>root:split-right</code>   <code>cmd</code>+<code>d</code> <code>doc:select-word</code>   <code>cmd</code>+<code>d</code> <code>find-replace:select-add-next</code>   <code>cmd</code>+<code>delete</code> <code>doc:delete-to-end-of-line</code>   <code>cmd</code>+<code>down</code> <code>doc:move-to-end-of-doc</code>   <code>cmd</code>+<code>f3</code> <code>find-replace:select-next</code>   <code>cmd</code>+<code>f</code> <code>find-replace:find</code>   <code>cmd</code>+<code>g</code> <code>doc:go-to-line</code>   <code>cmd</code>+<code>j</code> <code>doc:join-lines</code>   <code>cmd</code>+<code>l</code> <code>doc:select-lines</code>   <code>cmd</code>+<code>left</code> <code>doc:move-to-start-of-indentation</code>   <code>cmd</code>+<code>n</code> <code>core:new-doc</code>   <code>cmd</code>+<code>o</code> <code>core:open-file</code>   <code>cmd</code>+<code>option</code>+<code>down</code> <code>doc:create-cursor-next-line</code>   <code>cmd</code>+<code>option</code>+<code>up</code> <code>doc:create-cursor-previous-line</code>   <code>cmd</code>+<code>p</code> <code>core:find-file</code>   <code>cmd</code>+<code>pagedown</code> <code>root:move-tab-right</code>   <code>cmd</code>+<code>pageup</code> <code>root:move-tab-left</code>   <code>cmd</code>+<code>r</code> <code>find-replace:replace</code>   <code>cmd</code>+<code>return</code> <code>doc:newline-below</code>   <code>cmd</code>+<code>right</code> <code>doc:move-to-end-of-line</code>   <code>cmd</code>+<code>s</code> <code>doc:save</code>   <code>cmd</code>+<code>shift</code>+<code>[</code> <code>doc:select-to-previous-block-start</code>   <code>cmd</code>+<code>shift</code>+<code>]</code> <code>doc:select-to-next-block-end</code>   <code>cmd</code>+<code>shift</code>+<code>backspace</code> <code>doc:delete-to-previous-word-start</code>   <code>cmd</code>+<code>shift</code>+<code>c</code> <code>core:change-project-folder</code>   <code>cmd</code>+<code>shift</code>+<code>d</code> <code>doc:duplicate-lines</code>   <code>cmd</code>+<code>shift</code>+<code>delete</code> <code>doc:delete-to-next-word-end</code>   <code>cmd</code>+<code>shift</code>+<code>down</code> <code>doc:select-to-end-of-doc</code>   <code>cmd</code>+<code>shift</code>+<code>k</code> <code>doc:delete-lines</code>   <code>cmd</code>+<code>shift</code>+<code>l</code> <code>doc:select-word</code>   <code>cmd</code>+<code>shift</code>+<code>l</code> <code>find-replace:select-add-all</code>   <code>cmd</code>+<code>shift</code>+<code>left</code> <code>doc:select-to-start-of-indentation</code>   <code>cmd</code>+<code>shift</code>+<code>o</code> <code>core:open-project-folder</code>   <code>cmd</code>+<code>shift</code>+<code>p</code> <code>core:find-command</code>   <code>cmd</code>+<code>shift</code>+<code>return</code> <code>doc:newline-above</code>   <code>cmd</code>+<code>shift</code>+<code>right</code> <code>doc:select-to-end-of-line</code>   <code>cmd</code>+<code>shift</code>+<code>s</code> <code>doc:save-as</code>   <code>cmd</code>+<code>shift</code>+<code>up</code> <code>doc:select-to-start-of-doc</code>   <code>cmd</code>+<code>up</code> <code>doc:move-to-start-of-doc</code>   <code>cmd</code>+<code>v</code> <code>doc:paste</code>   <code>cmd</code>+<code>w</code> <code>root:close-or-quit</code>   <code>cmd</code>+<code>x</code> <code>doc:cut</code>   <code>cmd</code>+<code>y</code> <code>doc:redo</code>   <code>cmd</code>+<code>z</code> <code>doc:undo</code>   <code>ctrl</code>+<code>1lclick</code> <code>doc:split-cursor</code>   <code>ctrl</code>+<code>insert</code> <code>doc:copy</code>   <code>ctrl</code>+<code>shift</code>+<code>tab</code> <code>root:switch-to-previous-tab</code>   <code>ctrl</code>+<code>tab</code> <code>root:switch-to-next-tab</code>   <code>f3</code> <code>find-replace:repeat-find</code>   <code>option</code>+<code>backspace</code> <code>doc:delete-to-previous-word-start</code>   <code>option</code>+<code>delete</code> <code>doc:delete-to-next-word-end</code>   <code>option</code>+<code>down</code> <code>doc:move-lines-down</code>   <code>option</code>+<code>left</code> <code>doc:move-to-previous-word-start</code>   <code>option</code>+<code>right</code> <code>doc:move-to-next-word-end</code>   <code>option</code>+<code>shift</code>+<code>left</code> <code>doc:select-to-previous-word-start</code>   <code>option</code>+<code>shift</code>+<code>right</code> <code>doc:select-to-next-word-end</code>   <code>option</code>+<code>up</code> <code>doc:move-lines-up</code>   <code>shift</code>+<code>f3</code> <code>find-replace:previous-find</code>"},{"location":"documentation/keymap/","title":"Default Keymap","text":"<p>Keymaps on different operating systems may be bound differently to conform to normal expectations for that operating system. Currently, there are only two operating system layouts - macOS and everything else.</p>"},{"location":"documentation/keymap/#keymap","title":"Keymap","text":"Key Combination Actions     <code>alt</code>+<code>1</code> <code>root:switch-to-tab-1</code>   <code>alt</code>+<code>2</code> <code>root:switch-to-tab-2</code>   <code>alt</code>+<code>3</code> <code>root:switch-to-tab-3</code>   <code>alt</code>+<code>4</code> <code>root:switch-to-tab-4</code>   <code>alt</code>+<code>5</code> <code>root:switch-to-tab-5</code>   <code>alt</code>+<code>6</code> <code>root:switch-to-tab-6</code>   <code>alt</code>+<code>7</code> <code>root:switch-to-tab-7</code>   <code>alt</code>+<code>8</code> <code>root:switch-to-tab-8</code>   <code>alt</code>+<code>9</code> <code>root:switch-to-tab-9</code>   <code>alt</code>+<code>i</code> <code>root:switch-to-up</code>   <code>alt</code>+<code>j</code> <code>root:switch-to-left</code>   <code>alt</code>+<code>k</code> <code>root:switch-to-down</code>   <code>alt</code>+<code>l</code> <code>root:switch-to-right</code>   <code>alt</code>+<code>return</code> <code>core:toggle-fullscreen</code>   <code>alt</code>+<code>shift</code>+<code>i</code> <code>root:split-up</code>   <code>alt</code>+<code>shift</code>+<code>j</code> <code>root:split-left</code>   <code>alt</code>+<code>shift</code>+<code>k</code> <code>root:split-down</code>   <code>alt</code>+<code>shift</code>+<code>l</code> <code>root:split-right</code>   <code>ctrl</code>+<code>/</code> <code>doc:toggle-line-comments</code>   <code>ctrl</code>+<code>1lclick</code> <code>doc:split-cursor</code>   <code>ctrl</code>+<code>[</code> <code>doc:move-to-previous-block-start</code>   <code>ctrl</code>+<code>]</code> <code>doc:move-to-next-block-end</code>   <code>ctrl</code>+<code>a</code> <code>doc:select-all</code>   <code>ctrl</code>+<code>backspace</code> <code>doc:delete-to-previous-word-start</code>   <code>ctrl</code>+<code>c</code> <code>doc:copy</code>   <code>ctrl</code>+<code>d</code> <code>doc:select-word</code>   <code>ctrl</code>+<code>d</code> <code>find-replace:select-add-next</code>   <code>ctrl</code>+<code>delete</code> <code>doc:delete-to-next-word-end</code>   <code>ctrl</code>+<code>down</code> <code>doc:move-lines-down</code>   <code>ctrl</code>+<code>end</code> <code>doc:move-to-end-of-doc</code>   <code>ctrl</code>+<code>f3</code> <code>find-replace:select-next</code>   <code>ctrl</code>+<code>f</code> <code>find-replace:find</code>   <code>ctrl</code>+<code>g</code> <code>doc:go-to-line</code>   <code>ctrl</code>+<code>home</code> <code>doc:move-to-start-of-doc</code>   <code>ctrl</code>+<code>i</code> <code>find-replace:toggle-sensitivity</code>   <code>ctrl</code>+<code>insert</code> <code>doc:copy</code>   <code>ctrl</code>+<code>j</code> <code>doc:join-lines</code>   <code>ctrl</code>+<code>l</code> <code>doc:select-lines</code>   <code>ctrl</code>+<code>left</code> <code>doc:move-to-previous-word-start</code>   <code>ctrl</code>+<code>n</code> <code>core:new-doc</code>   <code>ctrl</code>+<code>o</code> <code>core:open-file</code>   <code>ctrl</code>+<code>p</code> <code>core:find-file</code>   <code>ctrl</code>+<code>pagedown</code> <code>root:move-tab-right</code>   <code>ctrl</code>+<code>pageup</code> <code>root:move-tab-left</code>   <code>ctrl</code>+<code>r</code> <code>find-replace:replace</code>   <code>ctrl</code>+<code>return</code> <code>doc:newline-below</code>   <code>ctrl</code>+<code>right</code> <code>doc:move-to-next-word-end</code>   <code>ctrl</code>+<code>s</code> <code>doc:save</code>   <code>ctrl</code>+<code>shift</code>+<code>[</code> <code>doc:select-to-previous-block-start</code>   <code>ctrl</code>+<code>shift</code>+<code>]</code> <code>doc:select-to-next-block-end</code>   <code>ctrl</code>+<code>shift</code>+<code>backspace</code> <code>doc:delete-to-previous-word-start</code>   <code>ctrl</code>+<code>shift</code>+<code>c</code> <code>core:change-project-folder</code>   <code>ctrl</code>+<code>shift</code>+<code>d</code> <code>doc:duplicate-lines</code>   <code>ctrl</code>+<code>shift</code>+<code>delete</code> <code>doc:delete-to-next-word-end</code>   <code>ctrl</code>+<code>shift</code>+<code>down</code> <code>doc:create-cursor-next-line</code>   <code>ctrl</code>+<code>shift</code>+<code>end</code> <code>doc:select-to-end-of-doc</code>   <code>ctrl</code>+<code>shift</code>+<code>f3</code> <code>find-replace:select-previous</code>   <code>ctrl</code>+<code>shift</code>+<code>home</code> <code>doc:select-to-start-of-doc</code>   <code>ctrl</code>+<code>shift</code>+<code>i</code> <code>find-replace:toggle-regex</code>   <code>ctrl</code>+<code>shift</code>+<code>k</code> <code>doc:delete-lines</code>   <code>ctrl</code>+<code>shift</code>+<code>l</code> <code>doc:select-word</code>   <code>ctrl</code>+<code>shift</code>+<code>l</code> <code>find-replace:select-add-all</code>   <code>ctrl</code>+<code>shift</code>+<code>left</code> <code>doc:select-to-previous-word-start</code>   <code>ctrl</code>+<code>shift</code>+<code>o</code> <code>core:open-project-folder</code>   <code>ctrl</code>+<code>shift</code>+<code>p</code> <code>core:find-command</code>   <code>ctrl</code>+<code>shift</code>+<code>return</code> <code>doc:newline-above</code>   <code>ctrl</code>+<code>shift</code>+<code>right</code> <code>doc:select-to-next-word-end</code>   <code>ctrl</code>+<code>shift</code>+<code>s</code> <code>doc:save-as</code>   <code>ctrl</code>+<code>shift</code>+<code>tab</code> <code>root:switch-to-previous-tab</code>   <code>ctrl</code>+<code>shift</code>+<code>up</code> <code>doc:create-cursor-previous-line</code>   <code>ctrl</code>+<code>tab</code> <code>root:switch-to-next-tab</code>   <code>ctrl</code>+<code>up</code> <code>doc:move-lines-up</code>   <code>ctrl</code>+<code>v</code> <code>doc:paste</code>   <code>ctrl</code>+<code>w</code> <code>root:close</code>   <code>ctrl</code>+<code>x</code> <code>doc:cut</code>   <code>ctrl</code>+<code>y</code> <code>doc:redo</code>   <code>ctrl</code>+<code>z</code> <code>doc:undo</code>   <code>f11</code> <code>core:toggle-fullscreen</code>   <code>f3</code> <code>find-replace:repeat-find</code>   <code>shift</code>+<code>f3</code> <code>find-replace:previous-find</code>"},{"location":"documentation/usage/","title":"Usage","text":"<p>Lite XL is a lightweight text editor written mostly in Lua \u2014 it aims to provide something practical, pretty, small and fast, implemented as simply as possible; easy to modify and extend, or to use without doing either.</p> <p>Lite XL is based on the Lite editor and provide some enhancements while remaining generally compatible with it.</p>"},{"location":"documentation/usage/#getting-started","title":"Getting Started","text":"<p>Lite XL works using a project directory \u2014 this is the directory where your project's code and other data resides.</p> <p>To open a specific project directory the directory name can be passed as a command-line argument (<code>.</code> can be passed to use the current directory) or the directory can be dragged onto either the executable or a running instance.</p> <p>Once started the project directory can be changed using the command <code>core:change-project-folder</code>. The command will close all the documents currently opened and switch to the new project directory.</p> <p>If you want to open a project directory in a new window the command <code>core:open-project-folder</code> will open a new editor window with the selected project directory.</p> <p>The main way of opening files in Lite XL is through the <code>core:find-file</code> command \u2014 this provides a fuzzy finder over all the project's files and can be opened using the <code>ctrl</code>+<code>p</code> shortcut by default.</p> <p>Commands can be run using keyboard shortcuts, or by using the <code>core:find-command</code> command bound to <code>ctrl</code>+<code>shift</code>+<code>p</code> by default. For example, pressing the above combination and typing <code>newdoc</code> then pressing <code>return</code> would open a new document. The current keyboard shortcut for a command can be seen to the right of the command name on the command finder, thus to find the shortcut for a command <code>ctrl</code>+<code>shift</code>+<code>p</code> can be pressed and the command name typed.</p>"},{"location":"documentation/usage/#user-data-directories","title":"User Data Directories","text":"<p>Lite XL uses standard systems' user directories; the user data can be found in <code>$HOME/.config/lite-xl</code> on Linux and macOS. On Windows, the variable <code>$USERPROFILE</code> will be used instead of <code>$HOME</code>.</p>"},{"location":"documentation/usage/#user-module","title":"User Module","text":"<p>Lite XL can be configured through use of the user module. The user module can be used for changing options in the config module, adding additional key bindings, loading custom color themes, modifying the style or changing any other part of the editor to your personal preference.</p> <p>The user module is loaded when the application starts, after the plugins have been loaded.</p> <p>The user module can be modified by running the <code>core:open-user-module</code> command or otherwise directly opening the <code>$HOME/.config/lite-xl/init.lua</code> file.</p> <p>On Windows, the variable <code>$USERPROFILE</code> will be used instead of <code>$HOME</code>.</p> <p>tl;dr:</p> <ul> <li>Windows: <code>C:\\Users\\(username)\\.config\\lite-xl\\init.lua</code></li> <li>macOS: <code>/Users/(usernmame)/.config/lite-xl/init.lua</code></li> <li>Linux: <code>/home/(username)/.config/lite-xl/init.lua</code></li> </ul> <p>These aren't the exact location, but it gives you an idea where to find.</p> <p>Please note that Lite XL differs from the standard Lite editor for the location of the user's module.</p>"},{"location":"documentation/usage/#project-module","title":"Project Module","text":"<p>The project module is an optional module which is loaded from the current project's directory when Lite XL is started. Project modules can be useful for things like adding custom commands for project-specific build systems, or loading project-specific plugins.</p> <p>The project module is loaded when the application starts, after both the plugins and user module have been loaded.</p> <p>The project module can be edited by running the <code>core:open-project-module</code> command \u2014 if the module does not exist for the current project when the command is run it will be created.</p>"},{"location":"documentation/usage/#add-directories-to-a-project","title":"Add directories to a project","text":"<p>In addition to the project directories it is possible to add other directories using the command <code>core:add-directory</code>. Once added a directory it will be shown in the tree-view on the left side and the additional files will be reachable using the <code>ctrl</code>+<code>p</code> command (find file). The additional files will be also visible when searching across the project.</p> <p>The additional directories can be removed using the command <code>core:remove-directory</code>.</p> <p>When you will open again Lite XL on the same project folder the application will remember your workspace including the additional project directories.</p> <p>Since version 1.15 Lite XL does not need a workspace plugin as it is now bundled with the editor.</p>"},{"location":"documentation/usage/#create-new-empty-directory","title":"Create new empty directory","text":"<p>Using the command <code>files:create-directory</code> or control-click in a directory in the tree-view to create a new empty subdirectory.</p>"},{"location":"documentation/usage/#commands","title":"Commands","text":"<p>Commands are used both through the command finder (<code>ctrl</code>+<code>shift</code>+<code>p</code>) and by Lite XL's keyboard shortcut system. Commands consist of 3 components:</p> <ul> <li>Name \u2014 The command name in the form of <code>namespace:action-name</code>, for   example: <code>doc:select-all</code></li> <li>Predicate \u2014 A function that returns true if the command can be run, for   example, for any document commands the predicate checks whether the active   view is a document</li> <li>Function \u2014 The function which performs the command itself</li> </ul> <p>Commands can be added using the <code>command.add</code> function provided by the <code>core.command</code> module:</p> <pre><code>local core = require \"core\"\nlocal command = require \"core.command\"\n\ncommand.add(\"core.docview\", {\n  [\"doc:save\"] = function()\n    core.active_view.doc:save()\n    core.log(\"Saved '%s', core.active_view.doc.filename\")\n  end\n})\n</code></pre> <p>Commands can be performed programmatically (e.g. from another command or by your user module) by calling the <code>command.perform</code> function after requiring the <code>command</code> module:</p> <pre><code>local command = require \"core.command\"\ncommand.perform \"core:quit\"\n</code></pre>"},{"location":"documentation/usage/#keymap","title":"Keymap","text":"<p>All keyboard shortcuts are handled by the <code>core.keymap</code> module. A key binding maps a \"stroke\" (e.g. <code>ctrl</code>+<code>q</code>) to one or more commands (e.g. <code>core:quit</code>). When the shortcut is pressed Lite XL will iterate each command assigned to that key and run the predicate function for that command \u2014 if the predicate passes it stops iterating and runs the command.</p> <p>An example of where this used is the default binding of the <code>tab</code> key:</p> <pre><code>  [\"tab\"] = { \"command:complete\", \"doc:indent\" },\n</code></pre> <p>When tab is pressed the <code>command:complete</code> command is attempted which will only succeed if the command-input at the bottom of the window is active. Otherwise, the <code>doc:indent</code> command is attempted which will only succeed if we have a document as our active view.</p> <p>A new mapping can be added by your user module as follows:</p> <pre><code>local keymap = require \"core.keymap\"\nkeymap.add { [\"ctrl+q\"] = \"core:quit\" }\n</code></pre> <p>A list of default mappings can be viewed here.</p>"},{"location":"documentation/usage/#global-variables","title":"Global variables","text":"<p>There are a few global variables set by the editor. These variables are available everywhere and shouldn't be overwritten.</p> <ul> <li><code>ARGS</code>: command-line arguments.   <code>argv[1]</code> is the program name, <code>argv[2]</code> is the 1st parameter, ...</li> <li><code>PLATFORM</code>: Output from <code>SDL_GetPlatform()</code>.   Can be <code>Windows</code>, <code>Mac OS X</code>, <code>Linux</code>, <code>iOS</code> and <code>Android</code>.</li> <li><code>SCALE</code>: Font scale.   Usually 1, but can be higher on Hi DPI systems.</li> <li><code>EXEFILE</code>: An absolute path to the executable.</li> <li><code>EXEDIR</code>: The executable directory.   DO NOT WRITE TO THIS DIRECTORY.</li> <li><code>VERSION</code>: Lite XL version.</li> <li><code>MOD_VERSION</code>: mod-version used in plugins.   This is usually incremented when there are API changes.</li> <li><code>PATHSEP</code>: Path separator. <code>\\</code> (Windows) or <code>/</code> (Other OSes)</li> <li><code>DATADIR</code>: The data directory, where the Lua part of Lite XL resides.   DO NOT WRITE TO THIS DIRECTORY.</li> <li><code>USERDIR</code>: User configuration directory.</li> </ul>  <p><code>USERDIR</code> should be used instead of <code>DATADIR</code> when configuring the editor because <code>DATADIR</code> might not be writable. (for example, if the editor is installed in <code>/usr</code>, <code>DATADIR</code> will be <code>/usr/share/lite-xl</code>!) <code>USERDIR</code> on the other hand should always be writable for the user, and allows multiple users to customize their own editor.</p>"},{"location":"documentation/usage/#plugins","title":"Plugins","text":"<p>Plugins in Lite XL are normal Lua modules and are treated as such \u2014 no complicated plugin manager is provided, and, once a plugin is loaded, it is never expected be to have to unload itself.</p> <p>To install a plugin simply drop it in the <code>plugins</code> directory in the user module directory. When Lite XL starts it will first load the plugins included in the data directory and will then load the plugins located in the user module directory.</p> <p>To uninstall a plugin the plugin file can be deleted \u2014 any plugin (including those included with the default installation) can be deleted to remove its functionality.</p> <p>If you want to load a plugin only under a certain circumstance (for example, only on a given project) the plugin can be placed somewhere other than the <code>plugins</code> directory so that it is not automatically loaded. The plugin can then be loaded manually as needed by using the <code>require</code> function.</p> <p>Plugins can be downloaded from the plugin repository.</p>"},{"location":"documentation/usage/#restarting-the-editor","title":"Restarting the editor","text":"<p>If you modify the user configuration file or some of the Lua implementation files you may restart the editor using the command <code>core:restart</code>. The entire application will be restarting by keeping the window that is already in use.</p>"},{"location":"documentation/usage/#color-themes","title":"Color Themes","text":"<p>Color themes in Lite XL are Lua modules which overwrite the color fields of Lite XL's <code>core.style</code> module. Pre-defined color methods are located in the <code>colors</code> folder in the data directory. Additional color themes can be installed in the user's directory in a folder named <code>colors</code>.</p> <p>A color theme can be set by requiring it in your user module:</p> <pre><code>core.reload_module \"colors.winter\"\n</code></pre> <p>In the Lite editor the function <code>require</code> is used instead of <code>core.reload_module</code>. In Lite XL <code>core.reload_module</code> should be used to ensure that the color module is actually reloaded when saving the user's configuration file.</p> <p>Color themes can be downloaded from the color theme repository. They are included with Lite XL release packages.</p>"},{"location":"setup/install/","title":"Installing Lite XL","text":"<p>Setting up Lite XL is easy and takes about 2 MB of internet bandwidth. Lite XL comes in <code>.zip</code> or <code>.tar.gz</code> packages depending on the platform.</p> <p>Lite XL also ships packages with extra plugins, marked with <code>addons</code>. These packages provide better out-of-the-box experience.</p>"},{"location":"setup/install/#platform-specific-installation","title":"Platform-specific installation","text":"<p>Installing Lite XL is usually as simple as downloading the package and extracting it. However, here are some platform-specific installation instructions.</p> <ul> <li>Windows</li> <li>Linux</li> <li>macOS</li> </ul>"},{"location":"setup/install/#windows","title":"Windows","text":"<p>Lite XL provides installers (<code>.exe</code>) and <code>.zip</code> packages for Windows.</p> <ol> <li>Download the Lite XL installer for your appropriate architecture.</li> <li>Once it is downloaded, run the installer to install Lite XL.</li> </ol> <p>Alternatively, you may download a <code>.zip</code> archive, extract it and run Lite XL from there.</p>"},{"location":"setup/windows/","title":"Windows","text":""},{"location":"setup/windows/#install","title":"Install","text":"<p>We provide installers and zip archives for Windows. You can get them from GitHub releases.</p> <ol> <li>Download the Lite XL installer from the release page.</li> <li>Run the installer and install Lite XL.</li> </ol> <p>Alternatively, you may download the zip archive, extract it and run it directly.</p>"},{"location":"setup/windows/#portable-application","title":"Portable application","text":"<p>The installer provides a \"Portable Mode\" checkbox which can be used to extract Lite XL into a directory. If this mode is enabled, the installer will not allow user to uninstall Lite XL from the Settings / Control Panel. Users can just delete the installation folder.</p>"},{"location":"setup/windows/#32-bit-support","title":"32-bit support","text":"<p>We also provide a 32-bit installer for Lite XL. A zip archive is also available.</p>  32-bit version of Lite XL is not actively tested for bugs. <p>Due to a lack of testers, we've only been able to test whether the code can compile on a 32-bit system. This does not mean that Lite XL may run correctly.</p>"},{"location":"setup/windows/#custom-title-bar","title":"Custom title bar","text":"<p>Windows users may notice that the title bar (window decoration) does not follow device theme. This is a known upstream issue related to SDL, so we are not planning to fix it.</p> <p>In the meantime, there are two alternatives:</p> <ol> <li>Enable custom title bar by setting <code>config.borderless</code> to <code>true</code> in <code>init.lua</code>.    The custom title bar will follow Lite XL's color scheme.</li> <li>Install immersive-title.    This approach will preserve Windows' title bar while having the correct    appearance on theme change.    However, it is a workaround to the original issue.</li> </ol> <p>The first option can be enabled with the following steps.</p> init.luaSettings UI   <pre><code>local config = require \"core.config\"\nconfig.borderless = true\n</code></pre>   <p>Toggle the \"Borderless\" checkbox under Core &gt; User Interface. </p>"},{"location":"tutorials/api-overview/","title":"API Overview","text":"<p>Note This is a work in progress.</p>  <p>These pages provide some guidance on how to use various Lite XL APIs. We assume that you are familiar with Lua as the guides can be quite technical.</p> <p>These pages only contain important or frequently used features. You can find documentation for a component in Lite XL's repository. For instance, the documentation for <code>View</code> can be found in <code>data/core/view.lua</code>. For C APIs, you can find documentation in the [<code>docs/api</code> folder].</p>    API Usage     Process API Create and manage processes   System API Interact with Lite XL's C code   Regex API Create and use regular expressions"},{"location":"tutorials/simple-plugin/","title":"Simple Plugin","text":""},{"location":"tutorials/simple-plugin/#what-is-simple","title":"What is Simple?","text":"<p>Simple is a very basic plugin written with the intention of introducing developers who are new to Lite XL to the process of writing plugins for the editor.</p>"},{"location":"tutorials/simple-plugin/#what-does-the-plugin-do","title":"What does the plugin do?","text":"<p>The plugin displays a message (that is taken as input from the user) in the top right corner of the editor window. It also allows the user to toggle the visibility of the message.</p>"},{"location":"tutorials/simple-plugin/#i-cant-write-lua","title":"I can't write Lua!","text":"<p>If you come from other programming languages, take a look at Lua cheat sheet. If you're new to programming, you can read this.</p>"},{"location":"tutorials/simple-plugin/#format-of-the-tutorial","title":"Format of the tutorial","text":"<p>The code contains comments detailing what most (if not all) of the code in the file does.</p>"},{"location":"tutorials/simple-plugin/#the-code","title":"The code","text":"<pre><code>-- mod-version:2 -- lite-xl 2.0\n\n-- you MUST put mod-version:x on the first line of your plugin\n-- mod-version usually maps to lite-xl releases (eg. mod-version: 2 == lite-xl 2.0)\n-- lite-xl won't load the plugin if the mod-version mismatches\n\n-----------------------------------------------------------------------\n-- NAME       : Simple\n-- DESCRIPTION: A simple guide on how to make your first Lite XL plugin\n-- AUTHOR     : Ashwin Godbole (aelobdog)\n-- GOALS      : To render some text inside the editor\n-----------------------------------------------------------------------\n-- Disclaimer :\n-- I am not a lua developer, and my knowledge about writing plugins for\n-- Lite XL is very limited. This file serves the purpose of helping the\n-- reader get started with plugin development for Lite XL, and therefore\n-- demonstrates only some very basic features. For more complex plugin\n-- development, be sure to check out the source code of some other\n-- plugins after going through this file.\n-----------------------------------------------------------------------\n-- Before we start writing any code for the plugin, we must import the\n-- required modules from the \"core\" package.\n\n-- the \"core\" module\nlocal core = require \"core\"\n\n-- the \"command\" module will help us register commands for our plugin.\nlocal command = require \"core.command\"\n\n-- the \"style\" module will allow us to use styling options\nlocal style = require \"core.style\"\n\n-- the \"config\" module will be used to store certain things like colors\n-- and functions\nlocal config = require \"core.config\"\n\n-- the \"keymap\" module will allow us to set keybindings for our commands\nlocal keymap = require \"core.keymap\"\n\n-- since we want to modify RootView, we'll need to require it first\nlocal RootView = require \"core.rootview\"\n\n-----------------------------------------------------------------------\n-- per-plugin config must stay in config.plugins.(plugin name)\nconfig.plugins.simple = {}\n\n-- colors are just three or four comma separated values (RGBA) (range 0 - 255)\n-- put inside of '{ }'. We will add our color to the config module.\nconfig.plugins.simple.text_color = {200, 140, 220} -- or use `{ common.color \"#C88CDC\" }`\n-----------------------------------------------------------------------\n-- Let's create a function to calculate the coordinates of our text.\n-- While we're at it, let's add our function to the `config` module.\n-- We'll take the message we want to display as the argument to the\n-- function to determine the x and y coordinates of the text.\n\nfunction config.plugins.simple.get_text_coordinates(message)\n   -- For this plugin, we want to display the text on the top right\n   -- corner of the screen. For this, we need to know the editor's width\n   -- and height.\n\n   -- The current font's size can be obtained from the \"style\" module.\n   -- The editor's dimensions can be obtained by\n   --   1. WIDTH  : core.root_view.size.x\n   --   2. HEIGHT : core.root_view.size.y\n\n   local message_width = style.code_font:get_width(message..\" \")\n   local font_height = style.code_font:get_size()\n   local x = core.root_view.size.x - message_width\n   local y = font_height / 2\n\n   return x, y\nend\n-----------------------------------------------------------------------\n-- Let's now get to actually drawing the text inside the editor.\n-- In order to \"inject\" our own code to draw text,\n-- we'll need to save the original draw function\n-- We'll save `RootView.draw` to a variable we call `parent_draw`\n\nlocal parent_draw = RootView.draw\n\n-- Now let's overload the original definition of `draw` in RootView\n-- by redefining the function.\n\nfunction RootView:draw()\n   -- We call the parent's function to keep the editor functional...\n   -- obviously we must still draw all the other stuff !\n   -- So we call the `parent_draw` function before doing anything else.\n   parent_draw(self)\n\n   -- we'll add an option to toggle the message on and off. let's use a\n   -- boolean variable to keep track of whether we want to display the\n   -- message or not.\n   if config.plugins.simple.show_my_message then\n      -- We'll be getting the message to display as input from the user\n      -- later. We'll store that user input in `config.plugins.simple.hw_message`.\n      -- (NOTE: this variable does not come in-built in lite-xl;\n      --        it is a variable that we will define later.)\n\n      -- let's store the value of config.plugins.simple.hw_message in a local variable\n      -- `message` in case config.plugins.simple.hw_message we set the message to\n      -- \"message not set yet!\"\n      local message\n\n      if config.plugins.simple.hw_message then\n          message = config.plugins.simple.hw_message\n      else\n          message = \"Message not set yet !\"\n      end\n\n      -- let's get the coordinates for our text\n      local x, y = config.plugins.simple.get_text_coordinates(message)\n\n      -- let's finally draw the text to the window !\n      -- the draw_text function from `renderer` is an important function\n      -- as it is used to display any and all text inside of the editor\n      -- window\n      renderer.draw_text(style.code_font, message, x, y, config.plugins.simple.text_color)\n   end\nend\n-----------------------------------------------------------------------\n-- Let's allow the user to turn the message on and off\n-- we'll write a function to flip our \"show\" boolean variable.\n\nlocal function toggle_helloworld()\n   config.plugins.simple.show_my_message = not config.plugins.simple.show_my_message\nend\n-----------------------------------------------------------------------\n-- Finally, let's add the toggle function to the command list so that\n-- we can call it from the C-S-p command panel. Let's add one command\n-- to toggle the visibility of the message on and off and one to get\n-- the user's message and then display it.\n\ncommand.add(nil, {\n   -- Toggle the visibility of the message\n   [\"simple:toggle\"] = toggle_helloworld,\n\n   -- Set and show the message\n   -- This is the way to get user input through the command bar.\n   -- `core.command_view:enter` takes 2 arguments:\n   --    * the prompt to display before taking input\n   --    * a function that takes the \"input\" as its argument\n   -- (NOTE: here the variable we are reading input into is `text`)\n   [\"simple:setshow\"] = function()\n      core.command_view:enter(\"Test to display\", function(text)\n         config.plugins.simple.hw_message = text\n         config.plugins.simple.show_my_message = true\n      end)\n   end\n}\n-----------------------------------------------------------------------\n-- Just for fun, let's assign our commands their own keybindings.\n-- Here, we assign the keybinding the same string(its name) as the one\n-- that we set while creating the command\nkeymap.add {\n   [\"alt+s\"] = \"simple:setshow\",\n   [\"alt+t\"] = \"simple:toggle\",\n}\n</code></pre>"},{"location":"tutorials/simple-plugin/#further-reading","title":"Further reading","text":"<ul> <li>Lite: An Implementation Overview,   an excellent post by rxi that stays mostly relevant to Lite XL.</li> <li>API overview, where some APIs are explained.</li> </ul>"},{"location":"tutorials/syntax-highlighting/","title":"Syntax Highlighting","text":""},{"location":"tutorials/syntax-highlighting/#how-to-create-syntax-highlighting-plugins-for-lite-xl","title":"How to create syntax highlighting plugins for Lite XL","text":"<p>Syntax highlighting plugins for Lite XL are Lua files. These define some patterns or regular expressions that match different parts of a given language, assigning token types to each match. These different token types are then given different colors by your chosen color scheme.</p> <p>Like other plugins, syntax definitions are sourced from the following folders, in order:</p> <ul> <li><code>/usr/share/lite-xl/plugins/</code></li> <li><code>$HOME/.config/lite-xl/plugins/</code></li> </ul> <p>NOTE: The exact location of these folders depends on the OS and installation method. For example, on Windows, the variable <code>$USERPROFILE</code> will be used instead of <code>$HOME</code>.</p> <p>The user module folder for Lite XL can generally be found in these places:</p> <ul> <li>Windows: <code>C:\\Users\\(username)\\.config\\lite-xl</code></li> <li>macOS: <code>/Users/(usernmame)/.config/lite-xl</code></li> <li>Linux: <code>/home/(username)/.config/lite-xl</code></li> </ul> <p>So, to create a new syntax definition on Linux, you can just create a <code>.lua</code> file in your <code>$HOME/.config/lite-xl/plugins/</code> folder.</p>"},{"location":"tutorials/syntax-highlighting/#what-syntax-token-types-are-supported","title":"What syntax token types are supported?","text":"<p>The supported syntax token types, defined by <code>lite-xl/core/style.lua</code>, are:</p> <ul> <li><code>normal</code></li> <li><code>symbol</code></li> <li><code>comment</code></li> <li><code>keyword</code></li> <li><code>keyword2</code></li> <li><code>number</code></li> <li><code>literal</code></li> <li><code>string</code></li> <li><code>operator</code></li> <li><code>function</code></li> </ul> <p>In your syntax highlighting plugin, you write patterns to match parts of the language syntax, assigning these token types to matches. You don't have to use them all - just use as many as you need for your language.</p> <p>Let's walk through an example syntax definition and see how this works.</p>"},{"location":"tutorials/syntax-highlighting/#example-syntax-ssh-config-files","title":"Example syntax: ssh config files","text":"<p>This is a small, simple example of a syntax definition. It's intended to highlight SSH Config files and looks like this:</p> <pre><code>-- mod-version:2 -- lite-xl 2.0\nlocal syntax = require \"core.syntax\"\n\nsyntax.add {\n  files = { \"sshd?/?_?config$\" },\n  comment = '#',\n  patterns = {\n    { pattern = \"#.*\\n\",        type = \"comment\"  },\n    { pattern = \"%d+\",          type = \"number\"   },\n    { pattern = \"[%a_][%w_]*\",  type = \"symbol\"   },\n    { pattern = \"@\",            type = \"operator\" },\n  },\n  symbols = {\n    -- ssh config\n    [\"Host\"]                         = \"function\",\n    [\"ProxyCommand\"]                 = \"function\",\n\n    [\"HostName\"]                     = \"keyword\",\n    [\"IdentityFile\"]                 = \"keyword\",\n    ...\n\n    -- sshd config\n    [\"Subsystem\"]                    = \"keyword2\",\n\n    -- Literals\n    [\"yes\"]      = \"literal\",\n    [\"no\"]       = \"literal\",\n    [\"any\"]      = \"literal\",\n    [\"ask\"]      = \"literal\",\n  },\n}\n</code></pre> <p>Let's take each section in turn and see how it works.</p>"},{"location":"tutorials/syntax-highlighting/#header","title":"Header","text":"<p>The first line is a Lua comment and tells Lite XL which version this plugin requires. The second imports the <code>core.syntax</code> module to allow us to declare a new syntax:</p> <pre><code>-- mod-version:2 -- lite-xl 2.0\nlocal syntax = require \"core.syntax\"\n</code></pre> <p>We then add a syntax definition to Lite XL with <code>syntax.add {...}</code>. The contents of this definition are covered next.</p>"},{"location":"tutorials/syntax-highlighting/#files","title":"Files","text":"<p>The <code>files</code> property tells Lite XL which files this syntax should be used for. This is a Lua pattern that matches against the full path of the current file. For example, to match against Markdown files (<code>.md</code> or a <code>.markdown</code> files), you could do this:</p> <pre><code>files = { \"%.md$\", \"%.markdown$\" },\n</code></pre> <p>In our original example, we match against the end of the path rather than the extension, because SSH config files don't have extensions, and we don't want to match all <code>config</code> files. We expect the path for SSH config files to look something like one of these:</p> <ul> <li><code>~/.ssh/config</code></li> <li><code>/etc/ssh/ssh_config</code></li> <li><code>/etc/ssh/sshd_config</code></li> </ul> <p>This pattern matches paths that look like that:</p> <pre><code>files = { \"sshd?/?_?config$\" },\n</code></pre>"},{"location":"tutorials/syntax-highlighting/#comment","title":"Comment","text":"<p>The <code>comment</code> property is used to tell Lite XL what to insert in order to create a comment. It is not a part of syntax definition. You can also use <code>block_comment</code> to tell Lite XL how to create multiline / block comments.</p>"},{"location":"tutorials/syntax-highlighting/#patterns","title":"Patterns","text":"<p>A given piece of text can only match one pattern. Once Lite XL decides that a piece of text matches a pattern, it will assign that token type to it and move on. Patterns are tested in the order that they are written in the syntax definition, so the first match will win.</p> <p>Patterns are based on Lua patterns or PCRE (Version 2).</p> <p>You may find detailed information on Lua patterns in the [Lua Reference Manual]. For PCRE, there are various [regex tester websites] that provide documentation.</p> <p>Lua patterns can be used by specifying <code>pattern</code> when defining a pattern, while PCRE can be used by specifying <code>regex</code> when defining a pattern.</p> <p>Each pattern takes one of the following forms:</p>"},{"location":"tutorials/syntax-highlighting/#simple-pattern","title":"Simple Pattern","text":"<pre><code>{ pattern = \"#.*\\n\",        type = \"comment\" },\n</code></pre> <p>When <code>pattern</code> is a string, Lite XL will test the input against the pattern. If the input matches, Lite XL will assign the given token type to the input.</p> <p>In this case, any line starting with <code>#</code> will be assigned the type <code>comment</code>.</p>"},{"location":"tutorials/syntax-highlighting/#start-end-pattern","title":"Start &amp; End Pattern","text":"<pre><code>{ pattern = { \"%[\", \"%]\" }, type = \"keyword\" },\n</code></pre> <p>When <code>pattern</code> is a table with 2 elements, Lite XL will use them to test for the start and the end of a range. Everything between the start and the end will be assigned the given token type.</p> <p>In this case, everything between <code>[</code> and <code>]</code> will be assigned the type <code>keyword</code>.</p> <p>However, it does not account for escape sequences. Inputs such as <code>[\\]]</code> will be interpreted wrongly as <code>[\\]</code> and <code>]</code>.</p>"},{"location":"tutorials/syntax-highlighting/#start-end-pattern-with-escape","title":"Start &amp; End Pattern with Escape","text":"<pre><code>{ pattern = { '\"', '\"', '\\\\' }, type = \"string\" },\n</code></pre> <p>When <code>pattern</code> is a table with 3 elements, Lite XL will use the first two to test for the start and the end of a range. The last element is used to denote an \"escape sequence\". If the text matches the 3rd element followed by the 2nd element, it will not be interpreted as the end of a range.</p> <p>In this case, everything between <code>\"</code> and <code>\"</code> will be assigned the type <code>string</code>. A <code>string</code> can have escape sequences prefixed with <code>\\</code>.</p> <p>Given the input <code>\"\\\"Hello John\\\"\"</code>, the entire input will be assigned the type <code>string</code>.</p>"},{"location":"tutorials/syntax-highlighting/#symbols","title":"Symbols","text":"<p>This is not related to the <code>symbol</code> token type.</p>  <p>The <code>symbols</code> section allows you to assign token types to particular keywords or strings - usually reserved words in the language you are highlighting. The token type in this section always take precedence over token types declared in patterns.</p> <p>For example this highlights <code>Host</code> using the <code>function</code> token type, <code>HostName</code> as a <code>keyword</code>, <code>yes</code>, <code>no</code>, <code>any</code> and <code>ask</code> as a <code>literal</code>:</p> <pre><code>[\"Host\"]                         = \"function\",\n[\"HostName\"]                     = \"keyword\",\n\n[\"yes\"]      = \"literal\",\n[\"no\"]       = \"literal\",\n[\"any\"]      = \"literal\",\n[\"ask\"]      = \"literal\",\n</code></pre>"},{"location":"tutorials/syntax-highlighting/#tips-double-check-your-patterns","title":"Tips: double-check your patterns!","text":"<p>There are a few common mistakes that can be made when using the <code>symbols</code> table in conjunction with patterns.</p>"},{"location":"tutorials/syntax-highlighting/#case-1-spaces-between-two-symbols-tokens","title":"Case 1: Spaces between two <code>symbols</code> tokens","text":"<p>Let's have an example:</p> <pre><code>{ pattern = \"[%a_][%w_]+%s+()[%a_][%w_]+\", type = { \"keyword2\", \"symbol\" } }\n</code></pre> <p>Let's explain the pattern a bit (omitting the empty parentheses):</p> <pre><code>[%a_] = any alphabet and underscore\n[%w_] = any alphabet, number and underscore\n%s = any whitespace character\n\nWORD =\n  [%a_] followed by (1 or more [%w_])\n\npattern =\n  WORD followed by (one or more %s) followed by WORD\n</code></pre> <p>Afterwards, you add an entry <code>[\"my\"] = \"literal\"</code> in the <code>symbols</code> table. You test the syntax with <code>my function</code> and found that <code>\"my\"</code> isn't highlighted as <code>literal</code>. Why did that happen?</p> <p><code>symbols</code> table requires an exact match. If you look carefully, the empty parentheses (<code>()</code>) is placed after the space! This tells Lite XL that <code>WORD followed by (one or more %s)</code> is a token, which will match <code>my</code> (note the space in the match).</p> <p>The fix is to add a <code>normal</code> token for the whitespace between the two tokens:</p> <pre><code>{ pattern = \"[%a_][%w_]+()%s+()[%a_][%w_]+\", type = { \"keyword2\", \"normal\", \"symbol\" } }\n</code></pre>"},{"location":"tutorials/syntax-highlighting/#case-2-patterns-symbols-tokens","title":"Case 2: Patterns &amp; <code>symbols</code> tokens","text":"<p>One might assume that Lite XL magically matches text against the <code>symbols</code> table. This is not the case.</p> <p>In some languages, people may add a generic pattern to delegate the matching to the <code>symbols</code> table.</p> <pre><code>{ pattern = \"[%a_][%w_]*\", \"symbol\" }\n</code></pre> <p>However, the <code>symbols</code> table may look like this:</p> <pre><code>symbols = {\n  [\"my-symbol\"] = \"function\",\n  [\"..something_else\"] = \"literal\"\n}\n</code></pre> <p><code>\"my-symbol</code> contains a dash (<code>-</code>) and <code>\"..something_else\"</code> contains 2 dots (<code>.</code>). None of the characters are matched by <code>[%a_][%w_]*</code>!</p> <p>Beware of the text you intend to match in the <code>symbols</code> table. If you want to use it, you need to ensure that it matches one of the patterns.</p> <p>The correct patterns are:</p> <pre><code>{ pattern = \"[%a_][%w%-_]*\", \"symbol\" },\n{ pattern = \"%.%.[%a_][%w_]*\", \"symbol\" },\n</code></pre>"},{"location":"tutorials/syntax-highlighting/#testing-your-new-syntax","title":"Testing Your New Syntax","text":"<p>To test your new syntax highlighting you need to do two things:</p> <ul> <li>Reload the Lite XL core</li> <li>Load a file in your chosen language and see how it looks</li> </ul> <p>To reload the core, you can either restart Lite XL or reload it. To do this, type <code>ctrl+shit+p</code> to open the command palette, then select <code>Core: Restart</code> (or type <code>crr</code> or something similar to match it), then press Enter. You will need to restart the core after any changes you make to the syntax highlighting definition.</p>"},{"location":"tutorials/syntax-highlighting/#example-advanced-syntax-markdown","title":"Example advanced syntax: Markdown","text":"<p>Note: This example has features from 2.1. It is not compatible with older versions of Lite XL.</p>  <p>Not all languages are as simple as SSH config files. Markup languages like HTML and Markdown are especially hard to parse correctly. Here's the Markdown syntax file in its full glory:</p> <pre><code>-- mod-version:3\nlocal syntax = require \"core.syntax\"\nlocal style = require \"core.style\"\nlocal core = require \"core\"\n\nlocal initial_color = style.syntax[\"keyword2\"]\n\n-- Add 3 type of font styles for use on markdown files\nfor _, attr in pairs({\"bold\", \"italic\", \"bold_italic\"}) do\n  local attributes = {}\n  if attr ~= \"bold_italic\" then\n    attributes[attr] = true\n  else\n    attributes[\"bold\"] = true\n    attributes[\"italic\"] = true\n  end\n  -- no way to copy user custom font with additional attributes :(\n  style.syntax_fonts[\"markdown_\"..attr] = renderer.font.load(\n    DATADIR .. \"/fonts/JetBrainsMono-Regular.ttf\",\n    style.code_font:get_size(),\n    attributes\n  )\n  -- also add a color for it\n  style.syntax[\"markdown_\"..attr] = style.syntax[\"keyword2\"]\nend\n\nlocal in_squares_match = \"^%[%]\"\nlocal in_parenthesis_match = \"^%(%)\"\n\nsyntax.add {\n  name = \"Markdown\",\n  files = { \"%.md$\", \"%.markdown$\" },\n  block_comment = { \"&lt;!--\", \"--&gt;\" },\n  space_handling = false, -- turn off this feature to handle it our selfs\n  patterns = {\n  ---- Place patterns that require spaces at start to optimize matching speed\n  ---- and apply the %s+ optimization immediately afterwards\n    -- bullets\n    { pattern = \"^%s*%*%s\",                 type = \"number\" },\n    { pattern = \"^%s*%-%s\",                 type = \"number\" },\n    { pattern = \"^%s*%+%s\",                 type = \"number\" },\n    -- numbered bullet\n    { pattern = \"^%s*[0-9]+[%.%)]%s\",       type = \"number\" },\n    -- blockquote\n    { pattern = \"^%s*&gt;+%s\",                 type = \"string\" },\n    -- alternative bold italic formats\n    { pattern = { \"%s___\", \"___%f[%s]\" },   type = \"markdown_bold_italic\" },\n    { pattern = { \"%s__\", \"__%f[%s]\" },     type = \"markdown_bold\" },\n    { pattern = { \"%s_[%S]\", \"_%f[%s]\" },   type = \"markdown_italic\" },\n    -- reference links\n    {\n      pattern = \"^%s*%[%^()[\"..in_squares_match..\"]+()%]: \",\n      type = { \"function\", \"number\", \"function\" }\n    },\n    {\n      pattern = \"^%s*%[%^?()[\"..in_squares_match..\"]+()%]:%s+.+\\n\",\n      type = { \"function\", \"number\", \"function\" }\n    },\n    -- optimization\n    { pattern = \"%s+\",                      type = \"normal\" },\n\n  ---- HTML rules imported and adapted from language_html\n  ---- to not conflict with markdown rules\n    -- Inline JS and CSS\n    {\n      pattern = {\n      \"&lt;%s*[sS][cC][rR][iI][pP][tT]%s+[tT][yY][pP][eE]%s*=%s*\" ..\n        \"['\\\"]%a+/[jJ][aA][vV][aA][sS][cC][rR][iI][pP][tT]['\\\"]%s*&gt;\",\n      \"&lt;%s*/[sS][cC][rR][iI][pP][tT]&gt;\"\n      },\n      syntax = \".js\",\n      type = \"function\"\n    },\n    {\n      pattern = {\n      \"&lt;%s*[sS][cC][rR][iI][pP][tT]%s*&gt;\",\n      \"&lt;%s*/%s*[sS][cC][rR][iI][pP][tT]&gt;\"\n      },\n      syntax = \".js\",\n      type = \"function\"\n    },\n    {\n      pattern = {\n      \"&lt;%s*[sS][tT][yY][lL][eE][^&gt;]*&gt;\",\n      \"&lt;%s*/%s*[sS][tT][yY][lL][eE]%s*&gt;\"\n      },\n      syntax = \".css\",\n      type = \"function\"\n    },\n    -- Comments\n    { pattern = { \"&lt;!%-%-\", \"%-%-&gt;\" },   type = \"comment\" },\n    -- Tags\n    { pattern = \"%f[^&lt;]![%a_][%w_]*\",    type = \"keyword2\" },\n    { pattern = \"%f[^&lt;][%a_][%w_]*\",     type = \"function\" },\n    { pattern = \"%f[^&lt;]/[%a_][%w_]*\",    type = \"function\" },\n    -- Attributes\n    {\n      pattern = \"[a-z%-]+%s*()=%s*()\\\".-\\\"\",\n      type = { \"keyword\", \"operator\", \"string\" }\n    },\n    {\n      pattern = \"[a-z%-]+%s*()=%s*()'.-'\",\n      type = { \"keyword\", \"operator\", \"string\" }\n    },\n    {\n      pattern = \"[a-z%-]+%s*()=%s*()%-?%d[%d%.]*\",\n      type = { \"keyword\", \"operator\", \"number\" }\n    },\n    -- Entities\n    { pattern = \"&amp;#?[a-zA-Z0-9]+;\",         type = \"keyword2\" },\n\n  ---- Markdown rules\n    -- math\n    { pattern = { \"%$%$\", \"%$%$\", \"\\\\\"  },  type = \"string\", syntax = \".tex\"},\n    { pattern = { \"%$\", \"%$\", \"\\\\\" },       type = \"string\", syntax = \".tex\"},\n    -- code blocks\n    { pattern = { \"```c++\", \"```\" },        type = \"string\", syntax = \".cpp\" },\n    -- ... there's some other patterns here, but I removed them for brevity\n    { pattern = { \"```lobster\", \"```\" },    type = \"string\", syntax = \".lobster\" },\n    { pattern = { \"```\", \"```\" },           type = \"string\" },\n    { pattern = { \"``\", \"``\" },             type = \"string\" },\n    { pattern = { \"%f[\\\\`]%`[%S]\", \"`\" },   type = \"string\" },\n    -- strike\n    { pattern = { \"~~\", \"~~\" },             type = \"keyword2\" },\n    -- highlight\n    { pattern = { \"==\", \"==\" },             type = \"literal\" },\n    -- lines\n    { pattern = \"^%-%-%-+\\n\",               type = \"comment\" },\n    { pattern = \"^%*%*%*+\\n\",               type = \"comment\" },\n    { pattern = \"^___+\\n\",                  type = \"comment\" },\n    -- bold and italic\n    { pattern = { \"%*%*%*%S\", \"%*%*%*\" },   type = \"markdown_bold_italic\" },\n    { pattern = { \"%*%*%S\", \"%*%*\" },       type = \"markdown_bold\" },\n    -- handle edge case where asterisk can be at end of line and not close\n    {\n      pattern = { \"%f[\\\\%*]%*[%S]\", \"%*%f[^%*]\" },\n      type = \"markdown_italic\"\n    },\n    -- alternative bold italic formats\n    { pattern = \"^___[%s%p%w]+___%s\" ,      type = \"markdown_bold_italic\" },\n    { pattern = \"^__[%s%p%w]+__%s\" ,        type = \"markdown_bold\" },\n    { pattern = \"^_[%s%p%w]+_%s\" ,          type = \"markdown_italic\" },\n    -- heading with custom id\n    {\n      pattern = \"^#+%s[%w%s%p]+(){()#[%w%-]+()}\",\n      type = { \"keyword\", \"function\", \"string\", \"function\" }\n    },\n    -- headings\n    { pattern = \"^#+%s.+\\n\",                type = \"keyword\" },\n    -- superscript and subscript\n    {\n      pattern = \"%^()%d+()%^\",\n      type = { \"function\", \"number\", \"function\" }\n    },\n    {\n      pattern = \"%~()%d+()%~\",\n      type = { \"function\", \"number\", \"function\" }\n    },\n    -- definitions\n    { pattern = \"^:%s.+\",                   type = \"function\" },\n    -- emoji\n    { pattern = \":[a-zA-Z0-9_%-]+:\",        type = \"literal\" },\n    -- images and link\n    {\n      pattern = \"!?%[!?%[()[\"..in_squares_match..\"]+()%]%(()[\"..in_parenthesis_match..\"]+()%)%]%(()[\"..in_parenthesis_match..\"]+()%)\",\n      type = { \"function\", \"string\", \"function\", \"number\", \"function\", \"number\", \"function\" }\n    },\n    {\n      pattern = \"!?%[!?%[?()[\"..in_squares_match..\"]+()%]?%]%(()[\"..in_parenthesis_match..\"]+()%)\",\n      type = { \"function\", \"string\", \"function\", \"number\", \"function\" }\n    },\n    -- reference links\n    {\n      pattern = \"%[()[\"..in_squares_match..\"]+()%] *()%[()[\"..in_squares_match..\"]+()%]\",\n      type = { \"function\", \"string\", \"function\", \"function\", \"number\", \"function\" }\n    },\n    {\n      pattern = \"!?%[%^?()[\"..in_squares_match..\"]+()%]\",\n      type = { \"function\", \"number\", \"function\" }\n    },\n    -- url's and email\n    {\n      pattern = \"&lt;[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+%.[a-zA-Z0-9-.]+&gt;\",\n      type = \"function\"\n    },\n    { pattern = \"&lt;https?://%S+&gt;\",           type = \"function\" },\n    { pattern = \"https?://%S+\",             type = \"function\" },\n    -- optimize consecutive dashes used in tables\n    { pattern = \"%-+\",                      type = \"normal\" },\n  },\n  symbols = { },\n}\n\n-- Adjust the color on theme changes\ncore.add_thread(function()\n  while true do\n    if initial_color ~= style.syntax[\"keyword2\"] then\n      for _, attr in pairs({\"bold\", \"italic\", \"bold_italic\"}) do\n        style.syntax[\"markdown_\"..attr] = style.syntax[\"keyword2\"]\n      end\n      initial_color = style.syntax[\"keyword2\"]\n    end\n    coroutine.yield(1)\n  end\nend)\n</code></pre> <p>It demonstrates a lot of syntax highlighting features that were added to v2.1.0 and some workarounds needed.</p>"},{"location":"tutorials/syntax-highlighting/#syntax-fonts-since-11610","title":"Syntax fonts (Since 1.16.10)","text":"<p>The syntax allows users to set different font styles (bold, italic, etc.) for different patterns. To change the font style of a token, add a Font to <code>style.syntax_fonts[token_type]</code>.</p> <p>For example: <pre><code>-- will ensure every \"fancysyntax_fancy_token\" is italic\nstyle.syntax_fonts[\"fancysyntax_fancy_token\"] = renderer.font.load(\"myfont.ttf\", 14 * SCALE, { italic = true })\n</code></pre></p> <p>The markdown example automates this with a for loop.</p> <p>The limitations here are that fonts cannot be copied with different attributes, thus the font path has to be hard-coded. Other than that, abusing <code>style.syntax_fonts</code> may lead to slow performance and high memory consumption. This is very obvious when the user tries to resize the editor with <code>ctrl-scroll</code> or <code>ctrl+</code> and <code>ctrl-</code>. Please use it in moderation.</p>"},{"location":"tutorials/syntax-highlighting/#space-handling-since-v210","title":"Space handling (since v2.1.0)","text":"<p>By default, Lite XL prepends a pattern <code>{ pattern = \"%s+\", type = \"normal\" }</code> to the syntax. This improves the performance drastically on lines that starts with whitespace (e.g. heavily indented lines). It works by matching the whitespace before other patterns in order to prevent Lite XL from iterating the entire syntax. However, there may be syntaxes that require matching spaces (e.g. Markdown with indented blocks) so this can be disabled by setting <code>space_handling</code> to <code>false.</code></p>  <p>To keep the space handling optimization or to support older versions of Lite XL, <code>{ pattern = \"%s+\", type = \"normal\" }</code> can be added after patterns that require space.</p>"},{"location":"tutorials/syntax-highlighting/#simple-patterns-with-multiple-tokens-v11610","title":"Simple patterns with multiple tokens (v1.16.10)","text":"<p>This is an excerpt taken from the Markdown plugin:</p> <pre><code>local in_squares_match = \"^%[%]\"\n-- reference links\n{\n  pattern = \"^%s*%[%^()[\"..in_squares_match..\"]+()%]: \",\n  type = { \"function\", \"number\", \"function\" }\n},\n</code></pre> <p>Sometimes it makes sense to highlight different parts of a pattern differently. An empty parenthesis (<code>()</code>) in Lua patterns will return the position of the text in the parentheses. This will tell Lite XL when to change the type of token. For instance, <code>^%s*%[%^</code> is <code>\"function\"</code>, <code>[\"..in_squares_match..\"]+</code> is <code>\"number\"</code> and <code>%]:</code> is <code>\"function\"</code>.</p>"},{"location":"tutorials/syntax-highlighting/#subsyntaxes-since-v11610","title":"Subsyntaxes (Since v1.16.10)","text":"<p>Lite XL supports embedding another syntax into the existing syntax. This is used to support code blocks inside the Markdown syntax.</p> <p>For example: <pre><code>{ pattern = { \"```cpp\", \"```\" },        type = \"string\", syntax = \".cpp\" },\n</code></pre></p> <p>This would highlight <code>```cpp</code> and <code>```</code> with <code>\"string\"</code> while everything inside them will be highlighted with a syntax that matches <code>\".cpp\"</code>.</p>"},{"location":"tutorials/system-fonts/","title":"Using system fonts","text":"<p>Lite XL does not provide a convenient way to use fonts on the system. There is literally different APIs for each platform we support (Windows, Linux and macOS). This is where fontconfig comes to our rescue. fontconfig is installable on a lot of OSes.</p> <p>Lite XL has a fontconfig plugin that we can use to find system fonts.</p>"},{"location":"tutorials/system-fonts/#installing-fontconfig","title":"Installing fontconfig","text":""},{"location":"tutorials/system-fonts/#windows","title":"Windows","text":"<p>mingw-w64-fontconfig provides a build that can be used directly on Windows. Download the file, extract it to somewhere and (optionally) add it to the PATH.</p>"},{"location":"tutorials/system-fonts/#linux","title":"Linux","text":"<p>Check your distro-specific instructions.</p> <pre><code># ubuntu / debian\napt install fontconfig\n# arch\npacman -Su fontconfig\n# fedora\ndnf install fontconfig\n...\n</code></pre>"},{"location":"tutorials/system-fonts/#macos","title":"macOS","text":"<pre><code>brew install fontconfig\n</code></pre>"},{"location":"tutorials/system-fonts/#setting-up","title":"Setting up","text":"<ol> <li>Install the plugin</li> <li>Put this in your user module:</li> </ol> <pre><code>local fontconfig = require \"plugins.fontconfig\"\nfontconfig.use {\n     font = { name = \"sans\", size = 13 * SCALE },\n     code_font = { name = \"monospace\", size = 13 * SCALE }\n}\n</code></pre> <p><code>\"sans\"</code> and <code>\"monospace\"</code> can be any fontconfig syntax. (check \"Font Names\")</p> <p>Note that the font might not load immediately (because we need to wait for <code>fc-match</code> to return. If you want that, replace <code>fontconfig.use</code> with <code>fontconfig.use_blocking</code>. Doing this will force Lite XL to wait for <code>fc-match</code>, which can be much slower.</p>"},{"location":"tutorials/overview/process/","title":"Process API","text":"<p>Lite XL provides a process API to launch external applications. This API is meant to replace Lua's <code>io.popen</code>, <code>system.exec()</code> and lite's pipe-to-a-file approach.</p> <p>Advantages of this API includes:</p> <ul> <li>Proper argument escaping (arguments are supplied via a table)</li> <li>Non-blocking IO</li> <li>Able to detach processes from Lite XL</li> <li>Does not create temporary files</li> <li>Mostly cross-platform (does not require special code for each shell)</li> <li>Does not create a console window on Windows</li> </ul> <p>Unless you plan to run a command and forget about it, you should stick with the Process API as it provides more features.</p>"},{"location":"tutorials/overview/process/#example-reading-a-file-with-cat","title":"Example: reading a file with <code>cat</code>","text":"<p>This example uses <code>cat</code> to read a file. This approach is impractical, but it demonstrates the typical usage of the Process API.</p> <pre><code>local core = require \"core\"\n\nlocal filename = \"myfile.lua\"\nlocal proc = process.start { \"cat\", filename }\n\n-- we use core.add_thread so that we don't softlock the editor\n-- while reading the output of the child process.\ncore.add_thread(function()\n  local readbuf = {}\n  while true do\n    -- yield so that the rest of the editor can carry out its tasks\n    -- eg. accepting input, updating the UI\n    coroutine.yield(1)\n\n    -- try to read from the standard output of the process.\n    local read = proc:read_stdout()\n    -- read == nil is a pretty good indication that the pipe is closed\n    -- therefore, no more data can be read.\n    if read == nil then break end\n    if read ~= \"\" then\n      -- if we read something, append it into the table\n      readbuf[#readbuf+1] = read\n    end\n    -- efficiently concatenate all the output into a string\n    local process_output = table.concat(readbuf)\n    -- note: never use core.log(process_output)!\n    -- core.log() accepts the same parameters as string.format(),\n    -- so you risk injecting invalid format strings!\n    core.log(\"read: %s\", process_output)\nend)\n</code></pre>"},{"location":"tutorials/overview/process/#terms","title":"Terms","text":"<p>To prevent confusion, these terms are used to describe various things:</p>    Terms Meaning     Child process A process created with Process API via <code>process.start()</code>   Parent process The parent process that owns the child. This usually refers to Lite XL.   Process Any process (including child and parent processes).   Stream An entity used to transfer data between child and parent processes. Think of it as a queue that can only be enqueued and dequeued.   Standard input The standard input of most processes. Colloquially known as stdin.   Standard error The standard error of most processes. Colloquially known as stderr.   Standard output The standard output of most processes. Colloquially known as stdout."},{"location":"tutorials/overview/process/#using-the-process-api","title":"Using the Process API","text":"<p>To create a child process, use <code>process.start()</code>.</p> <pre><code>function process.start(\n  program_args: string[] or string,\n  options: {\n    timeout: number,\n    cwd: string,\n    stdin: process.redirecttype,\n    stdout: process.redirecttype,\n    stderr: process.redirecttype,\n    env: table(string, string)\n  }\n): Process\n</code></pre> <p>The first argument of the function is a table containing the program name and its arguments. The program name and its arguments need not be escaped as the API does it when necessary.</p> <p>Since v2.1.0, users can provide a string instead of a table as the first argument to prevent the function from escaping them. This may help with legacy software on Windows such as <code>cmd.exe</code>. However, this should not be done on POSIX platforms as the entire string will be treated as the program name and cause issues.</p>  <p>Note Before v2.1.0, this table is not escaped on Windows.</p>  <p>The second argument specifies options to control process creation.</p> <p><code>timeout</code> is an advisory value that will be used by <code>process:wait()</code> and is optional.</p> <p><code>cwd</code> is the current working directory of the program. If specified, the child process would run as if it was started in the directory.</p> <p><code>stdin</code>, <code>stdout</code> and <code>stderr</code> tells Lite XL how to treat standard input and output of the child process. There are four possible values:</p> <ul> <li><code>process.REDIRECT_DEFAULT</code> is the default behavior. It will be deprecated   in future versions as specifying <code>nil</code> is preferred.</li> <li><code>process.REDIRECT_PIPE</code> allows the Process API to write/read   the input/output of the child process.</li> <li><code>process.REDIRECT_PARENT</code> redirects the child process' input/output   to the parent.   If <code>stdin</code> has this value, child process will accept input from the parent   process' console.   If <code>stdout</code> or <code>stderr</code> has this value, child process will output to the   parent process' console.</li> <li><code>process.REDIRECT_DISCARD</code> discards any data to/from child process.</li> <li><code>process.REDIRECT_STDOUT</code> can only be used on <code>stderr</code> and will redirect   the child process' standard error to its standard output.</li> </ul> <p><code>env</code> is a table containing the environment variables for the child process as key-value pairs.</p>  <p>Note On POSIX platforms, this table will extend the parent's environment. On Windows, this table will replace the parent's environment. In the future, this inconsistency may be fixed.</p>  <p>The function returns a <code>Process</code> object that the user should hold onto until the child process can be safely terminated. If the <code>Process</code> object is garbage-collected, the child process will be killed.</p>"},{"location":"tutorials/overview/process/#examples","title":"Examples","text":"<pre><code>-- run something in the background\nlocal proc = process.start { \"bash\", \"-c\", \"echo hello world\" }\n\n-- start a process and read its output\nlocal proc = process.start({ \"cat\", \"myfile\" }, { stdout = process.REDIRECT_PIPE })\n-- might or might not print something as the child process\n-- might not have written data to the standard output\nprint(proc:read_stdout())\n\n-- start a script with verbose output (accepting options over env vars)\nlocal proc = process.start({ \"./site.rb\" }, { env = { VERBOSE = \"1\" } })\n</code></pre>"},{"location":"tutorials/overview/process/#reading-from-a-child-process","title":"Reading from a child process","text":"<p>If the child process is created with proper output modes, one can read the standard output/error of the child process with the API.</p> <p>To read from the child process' standard output, use <code>process:read_stdout(len)</code>.</p> <p>To read from the child process' standard error, use <code>process:read_stderr(len)</code>.</p> <pre><code>function process:read_stdout(len: number or nil): string or (nil, string, number) end\nfunction process:read_stdout(len: number or nil): string or (nil, string, number) end\n</code></pre> <p>The <code>len</code> parameter is optional and is used to specify the maximum number of bytes to read from the stream.</p> <p>These methods return a string with size up to <code>len</code> if data can be read. Otherwise, they will return <code>nil</code>, an error message and the error code.</p>"},{"location":"tutorials/overview/process/#examples_1","title":"Examples","text":"<pre><code>-- proc is a process with stdout set to process.REDIRECT_PIPE\n-- read default number of bytes (2048) from the process' standard output\nprint(proc:read_stdout())\n\n-- read default number of bytes (2048) from the process' standard error\n-- ensure that stderr of the process is not set to process.REDIRECT_STDOUT!\nprint(proc:read_stderr())\n</code></pre>"},{"location":"tutorials/overview/process/#waiting-for-a-child-process","title":"Waiting for a child process","text":"<p>You might want to wait for a child process to end.</p> <p>To check if a child process is still running, use <code>process:running()</code>.</p> <p>To wait for a child process to end, use <code>process:wait(time)</code>.</p> <pre><code>function process:running(): boolean end\nfunction process:wait(timeout: number or nil): number or (nil, string, number) end\n</code></pre> <p><code>process:running()</code> returns a boolean immediately indicating whether the process has ended.</p>  <p>Note Do not use <code>process:running()</code> to determine when to stop reading the output of a child process. A child process can end and leave residual data in the stream. Instead, you should call <code>process.read_stdout()</code> or <code>process.read_stderr()</code> until an appropriate error (<code>process.ERROR_PIPE</code>) occurs.</p>  <p><code>process:wait(time)</code> will wait for specified number of milliseconds before returning. If the child process has ended, it will return the exit code of the process. If the child process is still running or an error occurred, it will return <code>nil</code> followed by an error message and error code.</p> <p>If <code>time</code> is 0, the method returns immediately. If <code>time</code> is <code>process.WAIT_INFINITE</code>, the method waits until the child process ends. If <code>time</code> is <code>process.WAIT_DEADLINE</code>, the method uses the <code>timeout</code> value specified when calling <code>process.start()</code>. If this value is not specified, it will wait until the child process ends.</p>"},{"location":"tutorials/overview/process/#examples_2","title":"Examples","text":"<pre><code>-- wait for a process to end\ncore.add_thread(function()\n  while process:running() do\n    coroutine.yield(0)\n    print(\"I am still running\")\n  end\n  print(\"Oh no!\")\nend)\n\n-- wait for a process to end, and print its exit code.\nprint(\"The process exited with the exit code \" .. process:wait(process.WAIT_INFINITE))\n</code></pre>"},{"location":"tutorials/overview/process/#terminating-a-child-process","title":"Terminating a child process","text":"<p>The Process API allows the user to terminate a child process gracefully or forcefully.</p> <p>Use <code>process:terminate()</code> to terminate a child process gracefully. If it fails, use <code>process:kill()</code> to forcefully terminate it.</p> <pre><code>function process:terminate(): boolean or (nil, string, number) end\nfunction process:kill(): boolean or (nil, string, number) end\n</code></pre> <p>On POSIX platforms, <code>process:terminate()</code> sends <code>SIGTERM</code> to the child process while <code>process:kill()</code> sends <code>SIGKILL</code> to the child process.</p> <p>On Windows, <code>process:terminate()</code> uses <code>GenerateConsoleCtrlEvent(CTRL_BREAK_EVENT)</code> to simulate CTRL+BREAK. <code>process:kill()</code> uses <code>TerminateProcess()</code> to terminate the process immediately.</p>  <p>Note <code>process:kill()</code> can only request a process to be killed. On POSIX, signals are delivered asynchronously; a child process can be too busy to process them (e.g. stuck at a blocking <code>read()</code> or <code>write()</code> call). This is the same on Windows except <code>TerminateProcess()</code> will request cancellation of all pending IO operations. This is impossible on POSIX platforms.</p>"},{"location":"tutorials/overview/process/#examples_3","title":"Examples","text":"<pre><code>-- try to terminate child process\nproc:terminate()\n\n-- wait for child process to end\nif not proc:wait(1000) then\n  -- didn't work, have to terminate it forcefully\n  proc:kill()\nend\n</code></pre>"},{"location":"tutorials/overview/process/#miscellaneous","title":"Miscellaneous","text":"<p><code>process:pid()</code> can be used to obtain the PID of a child process. It will return <code>0</code> if the process is not running.</p> <p><code>process:returncode()</code> can be used to get the exit code of the child process without calling <code>process:wait()</code>.</p> <p><code>process.strerror()</code> can be used to convert error codes emitted by the process API into human-readable error messages. If an error message is unavailable, <code>nil</code> will be returned.</p> <p><code>process:close_stream()</code> can be used to close the child process' streams.</p> <pre><code>function process:pid(): number\nfunction process:returncode(): number or nil\nfunction process.strerror(errcode: number): string or nil\nfunction process:close_stream(stream: number): number or (nil, string, number)\n</code></pre>  <p>Note <code>process:pid()</code> will not return the correct process ID if the child process ended early.</p>"},{"location":"tutorials/overview/process/#error-handling","title":"Error handling","text":"<p>The Process API functions and methods will return error messages/codes or throw errors.</p> <p><code>process.start()</code> will throw an error if the program cannot be run. On Windows, this usually results in an error message <code>\"Error creating a process: 2\"</code>.</p> <p><code>process:read()</code>, <code>process:read_stdout()</code>, <code>process:read_stderr()</code> and <code>process:write()</code> may throw errors if:</p> <ul> <li>The child process died.</li> <li>The child process closed their side of the input/output.</li> <li>The input/output is closed via <code>process:close_stream()</code>.</li> </ul> <p>Not all errors are documented here. In general, it is recommended to call the functions with <code>pcall()</code> until this inconsistency is fixed in the future.</p>"},{"location":"tutorials/overview/regex/","title":"Regex API","text":"<p>This API provides PCRE (Perl-Compatible Regular Expressions) and is written in C and Lua. The API bears some similarity to Lua's pattern library with some differences.</p>"},{"location":"tutorials/overview/regex/#example-matching-capture-groups-with-a-regular-expression","title":"Example: matching capture groups with a regular expression","text":"<pre><code>local s = \"hello world hello world\"\nfor hello, world in regex.gmatch(\"(hello)\\\\s+(world)\", s) do\n    print(hello .. \" \" .. world)\nend\n</code></pre>"},{"location":"tutorials/overview/regex/#another-example-replacing-words-with-a-regular-expression","title":"Another example: replacing words with a regular expression","text":"<pre><code>local s = \"hello world John!\"\nprint(regex.gsub(\"hello world (.+)!\", s, \"Hello world $1 Doe!\"))\n</code></pre>"},{"location":"tutorials/overview/regex/#using-the-regex-api","title":"Using the Regex API","text":"<p>Most Regex API functions accept a <code>Regex</code> object or a string to compile into a regex as their first argument. The only exception is <code>regex:cmatch()</code> which requires the first argument to be a <code>Regex</code> object.</p> <p>For more information regarding PCRE itself, please consult the documentation or a cheatsheet.</p>"},{"location":"tutorials/overview/regex/#creating-a-regex","title":"Creating a regex","text":"<p>Use <code>regex.compile()</code> to compile a regular expression. Compiling a regular expression is recommended if the user plans to use them frequently.</p> <pre><code>function regex.compile(pattern:  string,\n                        options: string or nil): Regex or (nil, string)\nend\n</code></pre> <p>The first argument to the function is the regular expression to compile. The second argument to the function is a string containing one or more pattern modifiers.</p> <ul> <li><code>\"i\"</code> enables case-insensitive matching</li> <li><code>\"m\"</code> enables multi-line matching</li> <li><code>\"s\"</code> matches all characters with the dot (<code>.</code>) meta-character,   including newlines.</li> </ul> <p>The function returns a compiled <code>Regex</code> object. If an error occurred, <code>nil</code> is returned along with an error message.</p>"},{"location":"tutorials/overview/regex/#example","title":"Example","text":"<pre><code>local s = \"Hello world!\\nWow!\"\n\n-- simple regex\nlocal r = regex.compile \"([A-Z]+)(,+)\"\n-- prints:\n-- H       ello world!\nprint(r:match(s))\n\n-- case-insensitive matching\nlocal r = regex.compile(\"([A-Z]+)(,+)\", \"i\")\n-- prints:\n-- Hello    world!\nprint(r:match(s))\n\n-- match all characters with .\nlocal r = regex.compile(\"([A-Z]+)(,+)\", \"is\")\n-- prints:\n-- Hello    world!\n-- Wow!\nprint(r:match(s))\n</code></pre>"},{"location":"tutorials/overview/regex/#matching-text","title":"Matching text","text":"<p>The Regex API provides low-level matching functions (<code>regex:cmatch()</code>, <code>regex.find_offsets()</code>), and high-level matching functions (<code>regex.match()</code>,<code>regex.find()</code>, <code>regex.gmatch()</code>, <code>regex.gsub()</code>).</p> <pre><code>function regex:cmatch(subject: string,\n                      offset:  number,\n                      options: number): ...number or nil\nend\n\nfunction regex.find_offsets(pattern: string or Regex,\n                            subject: string,\n                            offset:  number or nil,\n                            options: number or nil): ...number or nil\nend\n\nfunction regex.match(pattern:  string or Regex,\n                      subject: string,\n                      offset:  number or nil,\n                      options: number or nil): ...(number or string) or nil\nend\n\nfunction regex.find(pattern: string or Regex,\n                    subject: string,\n                    offset:  number or nil,\n                    options: number or nil): ...(number or string) or nil\nend\n\n-- since v2.1.1\nfunction regex.gmatch(pattern: string or Regex,\n                      subject: string,\n                      offset:  number or nil,\n                      options: number or nil): function(): ...string\nend\n</code></pre> <p>The first argument to <code>regex:cmatch()</code> is the subject string. The second argument is an offset in the subject string to indicate when to start matching. The third argument is a number comprised of multiple match options OR-ed together. These options are:</p> <ul> <li><code>regex.ANCHORED</code>: Only matches the start of the input;   similar to adding the <code>^</code> meta-character to the regex.</li> <li><code>regex.ENDANCHORED</code>: Only matches the end of the input;   similar to adding the <code>$</code> meta-character to the regex.</li> <li><code>regex.NOTBOL</code>: Do not treat beginning of subject string as beginning of line.</li> <li><code>regex.NOTEOL</code>: Do not treat end of subject string as end of line.</li> <li><code>regex.NOTEMPTY</code>: Do not treat an empty subject string as a valid match.</li> <li><code>regex.NOTEMPTY_ATSTART</code>: Do not treat empty string at the start of a subject   string as a valid match.</li> </ul> <p><code>regex.find_offsets()</code> accepts the same arguments, but the first argument can be a compiled <code>Regex</code> object or a string while the second and third argument are optional.</p> <p>Both <code>regex:cmatch()</code> and <code>regex.find_offsets()</code> return pairs of numbers indicating the start and end indices of all the matches. The first pair of numbers is the indices of the whole match. If captures were specified in the regex, the rest of the numbers are pairs of start and end indices for each capture.</p> <p>If no matches were found, both functions return <code>nil</code>. Otherwise, if an error occurred, both functions throw an error.</p>  <p>Warning Never use <code>regex:cmatch()</code> as it returns end indices that are off by 1. Instead, use <code>regex:.find_offsets()</code> which have the correct behavior.</p>"},{"location":"tutorials/overview/regex/#example_1","title":"Example","text":"<pre><code>local s = \"Apples, Oranges, Bananas\"\nlocal r = regex.compile(\"([A-Za-z]+),\\\\s*(.+)\")\n-- prints:\n-- 24\nprint(#s)\n-- prints:\n-- 1       25      1       7       9       25\nprint(r:cmatch(s))\n-- prints:\n-- 1       24      1       6       9       24\nprint(r:find_offsets(s))\n</code></pre> <p><code>regex.match()</code> and <code>regex.find()</code> are similar to Lua's <code>string.match()</code> and <code>string.find()</code>.</p> <p>The first argument is the compiled <code>Regex</code> or a string, while the second argument is the subject string to match. The third and fourth argument specify the offset of the string to start matching and match options. The third and fourth argument are optional.</p> <p><code>regex.match()</code> will return all captured strings. If no captures are specified in the regex, it will return the matched string. If a capture is empty, its offset will be returned.</p> <p><code>regex.find()</code> will return the start and end indices of the matched string, followed by the captured strings if any. If a capture is empty, its offset will be returned.</p> <p>Both functions return <code>nil</code> if no match was found.</p>  <p>Note There are no functions that return the start and end indices of captured strings. Use <code>regex.find_offsets()</code> for that.</p>"},{"location":"tutorials/overview/regex/#example_2","title":"Example","text":"<pre><code>local s = \"Apples, Oranges, Bananas\"\n-- prints:\n-- Apples    Oranges, Bananas\nprint(regex.match(\"([A-Za-z]+),\\\\s*(.+)\", s))\n-- prints:\n-- 1    24    Apples    Oranges, Bananas\nprint(regex.find(\"([A-Za-z]+),\\\\s*(.+)\", s))\n</code></pre> <p><code>regex.gmatch()</code> returns an iterator that iterates through all captured groups, or the whole match if no captures are specified in the regex.</p> <p>It accepts the same arguments as <code>regex.find()</code> and <code>regex.match()</code>.</p>"},{"location":"tutorials/overview/regex/#example_3","title":"Example","text":"<pre><code>local s = \"John doe, Jeanne Doe, Jane Doe\"\n-- will print:\n-- John - Doe\n-- Jeanne - Doe\n-- Jane - Doe\nfor first_name, last_name in regex.gmatch(\"([A-Za-z]+) ([A-Za-z]+)(,\\\\s*)?\", s) do\n  print(first_name .. \" - \" .. last_name)\nend\n\n-- will print:\n-- John\n-- doe\n-- Jeanne\n-- Doe\n-- Jane\n-- Doe\nfor name in regex.gmatch(\"\\\\w+\", s) do\n  print(name)\nend\n</code></pre>"},{"location":"tutorials/overview/regex/#string-substitution","title":"String substitution","text":"<p><code>regex.gsub()</code> can be used to perform simple string substitution.</p> <pre><code>function regex.gsub(pattern:     string or Regex,\n                    subject:     string,\n                    replacement: string,\n                    limit:       number or nil): (string, number)\nend\n</code></pre> <p>The first argument is the <code>Regex</code> object or a string, followed by the subject string. The third argument is the replacement string and the last is the maximum number of replacements to make.</p> <p>The function returns the subject string with matches replaced with the replacement string, followed by the number of replacements made.</p> <p>If an error occurred, the function throws an error.</p>"},{"location":"tutorials/overview/regex/#replacement-string","title":"Replacement string","text":"<p>The replacement string supports PCRE2 extended substitution syntax.</p> <p>To use named and unnamed capture groups with <code>$n</code> or <code>${n}</code> where <code>n</code> is the group number or name. The extended substitution syntax also supports two extra substitutions:</p> <ul> <li>The form <code>${n:-default}</code> will use <code>default</code> if <code>n</code> is unavailable.</li> <li>The form <code>${n:+iftrue:iffalse}</code> will use <code>iftrue</code> if <code>n</code> is available,   otherwise it will use <code>iffalse</code>.</li> </ul> <p>To insert a literal dollar sign (<code>$</code>), use <code>$$</code>.</p> <p>Other than that, <code>\\U</code> and <code>\\L</code> can be used to toggle uppercase or lowercase, while <code>\\u</code> and <code>\\l</code> causes the next character to be in uppercase or lowercase.</p>"},{"location":"tutorials/overview/regex/#example_4","title":"Example","text":"<pre><code>local s = \"John Doe, Jane Doe, Peter Doe\"\nlocal r = regex.compile \"(\\\\w+)\"\n\n-- prints:\n-- No No, No No, No No     6\nprint(r:gsub(s, \"No\"))\n-- prints:\n-- $John $doe, $Jane $Doe, $Peter $Doe     6\nprint(r:gsub(s, \"($1)\"))\n-- prints:\n-- john doe, jane doe, peter doe   6\nprint(r:gsub(s, \"\\\\l${1}\"))\n-- prints:\n-- Matched =&gt; John Matched =&gt; doe, Matched =&gt; Jane Matched =&gt; Doe, Matched =&gt; Peter Matched =&gt; Doe 6\nprint(r:gsub(s, \"${1:+Matched =&gt; $1:No match.}\"))\n</code></pre>"},{"location":"tutorials/overview/system/","title":"System API","text":"<p>This is where Lite XL's Lua code interact with its underlying C engine.</p>"},{"location":"tutorials/overview/system/#using-the-system-api","title":"Using the System API","text":"<p>There are many functions that belong to this API; not all are necessary for plugin development. As such, we'll ignore them here and only document the useful ones.</p>"},{"location":"tutorials/overview/system/#clipboard","title":"Clipboard","text":"<p><code>system.set_clipboard()</code> sets the clipboard content, while <code>system.get_clipboard()</code> retrieves the clipboard content.</p> <p>The functions do not support rich content such as images and files.</p> <pre><code>function system.set_clipboard(text: string) end\nfunction system.get_clipboard(text: string): string end\n</code></pre>"},{"location":"tutorials/overview/system/#examples","title":"Examples","text":"<pre><code>system.set_clipboard(\"wow magic\")\n-- prints:\n-- wow magic\nprint(system.get_clipboard(\"wow magic\"))\n</code></pre>"},{"location":"tutorials/overview/system/#file-directory-operations","title":"File / Directory operations","text":"<p>These functions deal with files, directories and paths.</p> <pre><code>-- Returns a list of files and directories in a directory.\nfunction system.list_dir(path: string): string[] or (nil, string) end\n-- Creates a new directory.\nfunction system.mkdir(path: string): (boolean, string or nil) end\n-- Removes a directory.\nfunction system.rmdir(path: string): (boolean, string or nil) end\n-- Changes the current working directory (equivalent to the `cd` command)\nfunction system.chdir(path: string) end\n-- Resolves the input path (removing all '.' and '..') into an absolute path.\nfunction system.absolute_path(path: string) end\n-- Returns information for a file or a directory.\nfunction system.get_file_info(path: string): table or (nil, string) end\n</code></pre> <p><code>system.get_file_info()</code> returns a table with the following properties:</p> <ul> <li><code>modified</code>: Modification time in seconds (UNIX timestamp).</li> <li><code>size</code>: Size of the file in bytes.</li> <li><code>type</code>: Type of the path (Can be <code>file</code> or <code>dir</code>).</li> <li><code>symlink</code>: The directory is a symlink (Only set on Linux and on directories).</li> </ul> <p>All the functions listed above except <code>system.chdir()</code> will return <code>nil</code> followed by an error message when an error occurred. <code>system.chdir()</code> will throw an error if an error occurred.</p>"},{"location":"tutorials/overview/system/#examples_1","title":"Examples","text":"<pre><code>-- DO NOT RUN THIS CODE!\n-- the code and its outputs are purely for demonstration only,\n-- and will not reflect your actual usage.\nlocal dir = \"../lite-xl\"\nlocal dir_resolved = system.absolute_path(dir)\n-- prints:\n-- /home/user/gh/lite-xl\nprint(dir_resolved)\n\n-- prints:\n-- .git =&gt; dir\n-- docs =&gt; dir\n-- .editorconfig =&gt; file\n-- LICENSE =&gt; file\n-- ...\n-- lite-xl =&gt; file\nfor i, d in ipairs(system.list_dir(dir_resolved)) do\n  local info = system.get_file_info(dir_resolved .. \"/\" .. d)\n  print(d .. \" =&gt; \" .. info.type)\nend\n\n-- create some directories\n-- this will not work because system.mkdir() doesn't create directories\n-- recursively, just like `mkdir` command without the `-p` option.\n-- prints:\n-- false   No such file or directory\nprint(system.mkdir(dir_resolved .. \"/1/2\"))\n\n-- these will work\n-- prints:\n-- true\nprint(system.mkdir(dir_resolved .. \"/1\"))\n-- prints:\n-- true\nprint(system.mkdir(dir_resolved .. \"/1/2\"))\n\n-- system.rmdir() does not support removing non-empty dirs, so\n-- this will not work and print an error\n-- prints:\n-- false   Directory not empty\nprint(system.rmdir(dir_resolved .. \"/1\"))\n\n-- instead, you should try to remove them recursively, making sure that each\n-- directory is empty\n-- prints:\n-- true\nprint(system.rmdir(dir_resolved .. \"/1/2\"))\n-- prints:\n-- true\nprint(system.rmdir(dir_resolved .. \"/1\"))\n</code></pre>"},{"location":"tutorials/overview/system/#timing","title":"Timing","text":"<p><code>system.get_time()</code> returns time in seconds since Lite XL started. It is a high-precision alternative to <code>os.time()</code>.</p> <pre><code>function system.get_time(): number end\n</code></pre>"},{"location":"tutorials/overview/system/#examples_2","title":"Examples","text":"<pre><code>-- prints:\n-- 30148.079763237\nprint(system.get_time())\n</code></pre>"},{"location":"tutorials/overview/system/#window-manipulation","title":"Window manipulation","text":"<p>These functions deal with Lite XL window.</p> <pre><code>-- Sets the window opacity from 0 to 1.\nfunction system.set_window_opacity(opacity: number): boolean end\n-- Sets the window title.\nfunction system.set_window_title(title: string) end\n-- Sets the window mode.\nfunction system.set_window_mode(mode: \"normal\"\n                                      or \"maximized\"\n                                      or \"minimized\"\n                                      or \"fullscreen\") end\n-- Enables/disables window borders (decoration).\nfunction system.set_window_bordered(enable: boolean) end\n-- Sets the window hit test region.\nfunction system.set_window_hit_test(height:        number or nil,\n                                    control_width: number or nil,\n                                    resize_border: number or nil)\nend\n-- Gets the window dimension and position.\nfunction system.get_window_size(): (number, number, number, number) end\n-- Sets the window dimension and position.\nfunction system.set_window_size(width:  number,\n                                height: number,\n                                x:      number,\n                                y:      number)\nend\n-- Checks whether windows has input focus.\nfunction system.window_has_focus(): boolean end\n-- Shows a message box with an error message.\nfunction system.show_fatal_error(title: string, msg: string) end\n</code></pre> <p>The <code>height</code> parameter in <code>system.set_window_hit_test()</code> refers to the height of the top decoration. Users can drag this part of the window to move it. <code>control_width</code> specifies the width of various window controls (minimize, maximize and close) buttons in the top right corner of the window. <code>resize_border</code> specifies the width of a \"border region\" where users can drag the window to resize it. This value does not overlap with the <code>height</code> parameter.</p> <p><code>system.get_window_size()</code> returns the width, height, x-coordinate and y-coordinate of the window respectively.</p> <p><code>system.set_window_opacity()</code> will return <code>false</code> if the operation failed. Otherwise, it returns <code>true</code>.</p>"},{"location":"tutorials/overview/system/#miscellaneous","title":"Miscellaneous","text":"<p><code>system.exec()</code> runs a command in the background. It is useful if you just want to run a program and doesn't care about its output and exit code. If you want more features, consider using the Process API.</p> <p><code>system.fuzzy_match()</code> generates a score for sorting text based on relevance.</p> <pre><code>function system.exec(command: string) end\nfunction system.fuzzy_match(haystack: string,\n                            needle:   string,\n                            file:     boolean): number\nend\n</code></pre> <p><code>system.exec()</code> accepts a string containing a command to run. This command will be run as <code>system(\"&lt;command&gt; &amp;\")</code> on POSIX platforms and <code>cmd /c \"&lt;command&gt;\"</code> on Windows, so make sure that the command is escaped properly.</p> <p><code>system.fuzzy_match()</code> takes in a <code>haystack</code> (a possible match) and a <code>needle</code> (the string to search) to generate a similarity score. If the score is 1, both strings are identical. When the third argument is <code>true</code>, the matching will be done backwards as this is more suitable for matching paths.</p>"}]}